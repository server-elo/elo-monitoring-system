/** * Type definitions for the Multi-Agent Deep Analysis System */ import { z } from 'zod'; // Agent Specializations
export enum AgentSpecialization { SECURITY: 'security', PERFORMANCE = 'performance', ARCHITECTURE = 'architecture', TESTING = 'testing', ACCESSIBILITY = 'accessibility', BEST_PRACTICES = 'best_practices', DOCUMENTATION = 'documentation', DEPENDENCIES = 'dependencies'} // Priority Levels
export enum Priority { LOW: 'low', MEDIUM = 'medium', HIGH = 'high', CRITICAL = 'critical'} // Message Types for Inter-Agent Communication
export enum MessageType { ANALYSIS_REQUEST: 'analysis_request', ANALYSIS_RESULT = 'analysis_result', COLLABORATION_REQUEST = 'collaboration_request', CONSENSUS_PROPOSAL = 'consensus_proposal', KNOWLEDGE_SHARE = 'knowledge_share', HEALTH_CHECK = 'health_check', STATUS_UPDATE = 'status_update'} // Issue Severity
export enum IssueSeverity { INFO: 'info', WARNING = 'warning', ERROR = 'error', CRITICAL = 'critical'} // Analysis Status
export enum AnalysisStatus { PENDING: 'pending', IN_PROGRESS = 'in_progress', COMPLETED = 'completed', FAILED = 'failed', TIMEOUT = 'timeout'} // Complexity Levels
export enum ComplexityLevel { SIMPLE: 'simple', MODERATE = 'moderate', COMPLEX = 'complex', VERY_COMPLEX = 'very_complex'} // Agent Capability Schema
export const AgentCapabilitySchema = z.object({  name: z.string(), description: z.string(), requiredContext: z.array(z.string()), outputFormat: z.string()}); export type AgentCapability = z.infer<typeof AgentCapabilitySchema>; // Analysis Context Schema
export const AnalysisContextSchema = z.object({ code: z.string(), language: z.enum(['solidity', 'javascript', 'typescript']), fileName: z.string().optional(), projectContext: z.object({ type: z.enum(['defi', 'nft', 'dao', 'utility', 'other']), framework: z.string().optional(), version: z.string().optional(), complexity: z.nativeEnum(ComplexityLevel), contractCount: z.number().optional(), lineCount: z.number()}).optional(), userContext: z.object({ skillLevel: z.enum(['beginner', 'intermediate', 'advanced']), preferences: z.record(z.string()).optional(), previousAnalyses: z.number().default(0)}).optional(), analysisOptions: z.object({ depth: z.enum(['quick', 'standard', 'deep']).default('standard'), focusAreas: z.array(z.nativeEnum(AgentSpecialization)).optional(), timeout: z.number().default(30000), // 30 seconds default includeRecommendations: z.boolean().default(true), generateVisualizations: z.boolean().default(true)}).optional()}); export type AnalysisContext = z.infer<typeof AnalysisContextSchema>; // Analysis Request Schema
export const AnalysisRequestSchema = z.object({ id: z.string().uuid(), context: AnalysisContextSchema, priority: z.nativeEnum(Priority).default(Priority.MEDIUM), requestedAgents: z.array(z.nativeEnum(AgentSpecialization)).optional(), deadline: z.date().optional()}); export type AnalysisRequest = z.infer<typeof AnalysisRequestSchema>; // Issue Schema
export const IssueSchema = z.object({ id: z.string().uuid(), severity: z.nativeEnum(IssueSeverity), category: z.string(), title: z.string(), description: z.string(), location: z.object({ file: z.string().optional(), line: z.number().optional(), column: z.number().optional(), endLine: z.number().optional(), endColumn: z.number().optional()}).optional(), suggestion: z.string().optional(), codeSnippet: z.string().optional(), references: z.array(z.string()).optional()}); export type Issue = z.infer<typeof IssueSchema>; // Recommendation Schema
export const RecommendationSchema = z.object({ id: z.string().uuid(), priority: z.nativeEnum(Priority), category: z.string(), title: z.string(), description: z.string(), impact: z.string(), effort: z.enum(['low', 'medium', 'high']), implementation: z.string().optional(), resources: z.array(z.string()).optional()}); export type Recommendation = z.infer<typeof RecommendationSchema>; // Agent Analysis Result Schema
export const AgentAnalysisSchema = z.object({ agentId: z.string(), specialization: z.nativeEnum(AgentSpecialization), status: z.nativeEnum(AnalysisStatus), startTime: z.date(), endTime: z.date().optional(), issues: z.array(IssueSchema), insights: z.array(z.object({ type: z.string(), content: z.string(), confidence: z.number().min(0).max(1)})), metrics: z.record(z.number()), recommendations: z.array(RecommendationSchema).optional(), collaborationRequests: z.array(z.string()).optional(), error: z.string().optional()}); export type AgentAnalysis = z.infer<typeof AgentAnalysisSchema>; // Agent Message Schema
export const AgentMessageSchema = z.object({ id: z.string().uuid(), from: z.string(), to: z.union([z.string(), z.array(z.string())]), type: z.nativeEnum(MessageType), payload: z.any(), timestamp: z.number(), priority: z.nativeEnum(Priority), replyTo: z.string().uuid().optional()}); export type AgentMessage = z.infer<typeof AgentMessageSchema>; // Collaboration Result Schema
export const CollaborationResultSchema = z.object({ id: z.string().uuid(), participants: z.array(z.string()), consensusReached: z.boolean(), findings: z.array(z.object({ finding: z.string(), supportingAgents: z.array(z.string()), confidence: z.number().min(0).max(1)})), conflicts: z.array(z.object({ issue: z.string(), positions: z.record(z.string()), resolution: z.string().optional()})).optional()}); export type CollaborationResult = z.infer<typeof CollaborationResultSchema>; // Deep Analysis Result Schema
export const DeepAnalysisResultSchema = z.object({ id: z.string().uuid(), timestamp: z.date(), context: AnalysisContextSchema, overallScore: z.number().min(0).max(100), status: z.nativeEnum(AnalysisStatus), criticalIssues: z.array(IssueSchema), agentResults: z.record(z.nativeEnum(AgentSpecialization), AgentAnalysisSchema), consensus: z.object({ overallAssessment: z.string(), keyFindings: z.array(z.string()), disagreements: z.array(z.string()).optional(), confidence: z.number().min(0).max(1)}), recommendations: z.array(RecommendationSchema), visualizations: z.object({ dependencyGraph: z.any().optional(), complexityHeatmap: z.any().optional(), securityRadar: z.any().optional(), performanceProfile: z.any().optional()}).optional(), actionItems: z.array(z.object({ id: z.string().uuid(), title: z.string(), priority: z.nativeEnum(Priority), category: z.string(), estimatedEffort: z.string()})), learningInsights: z.array(z.object({ topic: z.string(), insight: z.string(), relevantResources: z.array(z.string())})).optional()}); export type DeepAnalysisResult = z.infer<typeof DeepAnalysisResultSchema>; // Agent Configuration Schema
export const AgentConfigSchema = z.object({ id: z.string(),  name: z.string(), specialization: z.nativeEnum(AgentSpecialization), description: z.string(), capabilities: z.array(AgentCapabilitySchema), priority: z.number().min(0).max(100), enabled: z.boolean().default(true), config: z.record(z.any()).optional(), resourceLimits: z.object({ maxMemoryMB: z.number().optional(), maxCPUPercent: z.number().optional(), timeoutMs: z.number().optional()}).optional()}); export type AgentConfig = z.infer<typeof AgentConfigSchema>; // Task Queue Item Schema
export const TaskQueueItemSchema = z.object({ id: z.string().uuid(), request: AnalysisRequestSchema, assignedAgents: z.array(z.string()), status: z.nativeEnum(AnalysisStatus), priority: z.nativeEnum(Priority), createdAt: z.date(), startedAt: z.date().optional(), completedAt: z.date().optional(), retryCount: z.number().default(0), maxRetries: z.number().default(3)}); export type TaskQueueItem = z.infer<typeof TaskQueueItemSchema>; // Agent Health Status Schema
export const AgentHealthStatusSchema = z.object({ agentId: z.string(), status: z.enum(['healthy', 'degraded', 'unhealthy', 'offline']), lastHealthCheck: z.date(), metrics: z.object({ responseTime: z.number(), successRate: z.number(), queueLength: z.number(), memoryUsage: z.number().optional(), cpuUsage: z.number().optional()}), errors: z.array(z.object({ timestamp: z.date(), error: z.string(), count: z.number()})).optional()}); export type AgentHealthStatus = z.infer<typeof AgentHealthStatusSchema>;
