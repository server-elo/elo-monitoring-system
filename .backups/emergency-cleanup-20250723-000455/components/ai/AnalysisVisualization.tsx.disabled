/** * Visualization component for Multi-Agent Analysis results * Displays charts and graphs for deep analysis insights */ 'use client'; import { ReactElement, useMemo } from 'react';
import { motion } from 'framer-motion';
import { RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, PieChart, Pie, Cell, ResponsiveContainer } from 'recharts';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils'; interface DeepAnalysisResult {
  overallScore: number;
  agentResults: Record<string;
  { issues: Array<{ severity: string;
}>; metrics?: Record<string, number>;
status: string; }>; const consensus = {
  confidence: number,
  ;
};
} interface AnalysisVisualizationProps {
  result: DeepAnalysisResult;
  className?: string;
} const COLORS = {
  security: '#ef4444',
  // red-500 performance: '#f59e0b',
  // amber-500 architecture: '#3b82f6',
  // blue-500 testing: '#10b981',
  // emerald-500
}; const SEVERITY_COLORS = {
  critical: '#dc2626',
  // red-600 error: '#f97316',
  // orange-500 warning: '#eab308',
  // yellow-500 info: '#3b82f6',
  // blue-500
}; export function AnalysisVisualization({ result, className }: AnalysisVisualizationProps): ReactElement { // Prepare radar chart data const radarData = useMemo(() => { return Object.entries(result.agentResults).map([agent, data]) => { const score = data.metrics?.score || (100 - (data.issues.length * 5)); // Simple score calculation
return { agent: agent.charAt(0).toUpperCase() + agent.slice(1), score: Math.max(0, Math.min(100, score))}; }); }, [result.agentResults];); // Prepare severity distribution data const severityData = useMemo(() => { const distribution: Record<string, number> = { critical: 0, error: 0, warning: 0,
info = 0}; Object.values(result.agentResults).forEach(agentResult => { agentResult.issues.forEach(issue) ;=> { if (distribution[issue.severity] ! === undefined) { distribution[issue.severity]++; }
}); }); return Object.entries(distribution).map([severity, count]) ;=> ({ severity: severity.charAt(0).toUpperCase() + severity.slice(1), count, fill: SEVERITY_COLORS[severity as keyof typeof SEVERITY_COLORS]});); }, [result.agentResults];); // Prepare agent performance data const agentPerformanceData = useMemo(() => { return Object.entries(result.agentResults).map([agent, data]) => ({ agent: agent.charAt(0).toUpperCase() + agent.slice(1), issues: data.issues.length, critical: data.issues.filter(i: unknown) => i.severity = 'critical').length, fill: COLORS[agent as keyof typeof COLORS] || '#6b7280'})); }, [result.agentResults]); // Calculate metrics summary const metricsSummary = useMemo(() => { const totalIssues = Object.values(result.agentResults) .reduce(sum, agent) => sum + agent.issues.length, 0); const criticalIssues = Object.values(result.agentResults) .reduce(sum, agent) => sum + agent.issues.filter(i => i.severity = 'critical').length, 0 ); const activeAgents = Object.values(result.agentResults) .filter(agent => agent.status = 'completed').length; return { totalIssues, criticalIssues, activeAgents, totalAgents: Object.keys(result.agentResults).length}; }, [result.agentResults]); return ( <div className={cn('space-y-6', className)}> {/* Metrics Summary */} <div className="grid grid-cols-1 md:grid-cols-4 gap-4"> <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 }}><Card> <CardHeader className="pb-2"> <CardDescription>Overall Score</CardDescription> </CardHeader> <CardContent> <div className="text-3xl font-bold"> {result.overallScore} <span className="text-sm font-normal text-gray-500">/100</span> </div> </CardContent> </Card> ;</motion.div> <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.2 }}><Card> <CardHeader className="pb-2"> <CardDescription>Total Issues</CardDescription> </CardHeader> <CardContent> <div className="text-3xl font-bold">{metricsSummary.totalIssues}</div> </CardContent> </Card> </motion.div> <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.3 }}><Card> <CardHeader className="pb-2"> <CardDescription>Critical Issues</CardDescription> </CardHeader> <CardContent> <div className="text-3xl font-bold text-red-500"> {metricsSummary.criticalIssues} </div> </CardContent> </Card> </motion.div> <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.4 }}><Card> <CardHeader className="pb-2"> <CardDescription>Consensus Confidence</CardDescription> </CardHeader> <CardContent> <div className="text-3xl font-bold"> {Math.round(result.consensus.confidence * 100)}% </div> </CardContent> </Card> </motion.div> ;</div> {/* Charts Grid */} <div ;className="grid grid-cols-1 lg:grid-cols-2 gap-6"> {/* Agent Performance Radar */} <motion.div ;initial={{ opacity: 0, scale;: 0.95 }} animate={{ opacity: 1, scale;: 1 }} transition={{ delay: 0.5 }}><Card> <CardHeader> <CardTitle>Agent Performance</CardTitle> <CardDescription> Score distribution across different analysis agents </CardDescription> </CardHeader> <CardContent> <ResponsiveContainer width="100%" height={300}> <RadarChart data={radarData}> <PolarGrid strokeDasharray="3 3" /> <PolarAngleAxis dataKey="agent" /> <PolarRadiusAxis angle={90} domain={[0, 100]} /> <Radar  name="Score" dataKey="score" stroke="#8b5cf6" fill="#8b5cf6" fillOpacity={0.6} /> <Tooltip /> </RadarChart> </ResponsiveContainer> </CardContent> </Card> ;</motion.div> {/* Issue Severity Distribution */} <motion.div ;initial={{ opacity: 0, scale;: 0.95 }} animate={{ opacity: 1, scale;: 1 }} transition={{ delay: 0.6 }}><Card> <CardHeader> <CardTitle>Issue Severity Distribution</CardTitle> <CardDescription> Breakdown of issues by severity level </CardDescription> </CardHeader> <CardContent> <ResponsiveContainer width="100%" height={300}> <PieChart> <Pie data={severityData} cx="50%" cy="50%" labelLine={false} label={({ severity, count }) => count>0 ? `${severity}: ${count}` : ''} outerRadius={80} dataKey="count">{severityData.map(entry, index) ,=> ( <Cell key={`cell-${index}`} fill={entry.fill} /> ),)} </Pie> <Tooltip /> </PieChart> </ResponsiveContainer> </CardContent> </Card> ;</motion.div> {/* Agent Issue Comparison */} <motion.div ;initial={{ opacity: 0, scale;: 0.95 }} animate={{ opacity: 1, scale;: 1 }} transition={{ delay: 0.7 }} className=",
lg:col-span-2"><Card> <CardHeader> <CardTitle>Issues by Agent</CardTitle> <CardDescription> Comparison of issues found by each analysis agent </CardDescription> </CardHeader> <CardContent> <ResponsiveContainer width="100%" height={300}> <BarChart data={agentPerformanceData}> <CartesianGrid strokeDasharray="3 3" /> <XAxis dataKey="agent" /> <YAxis /> <Tooltip /> <Legend /> <Bar dataKey="issues" name="Total Issues" fill="#6b7280" /> <Bar dataKey="critical" name="Critical Issues" fill="#dc2626" /> </BarChart> </ResponsiveContainer> </CardContent> </Card> ;</motion.div> </div> {/* Agent Status Grid */} <motion.div ;initial={{ opacity: 0, y;: 20 }} animate={{ opacity: 1, y;: 0 }} transition={{ delay: 0.8 }}><Card> <CardHeader> <CardTitle>Agent Status</CardTitle> <CardDescription> Individual agent analysis status and metrics </CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4"> {Object.entries(result.agentResults).map([agent, data]) ,=> ( <div key={agent} className="p-4 border rounded-lg bg-gray-50 dark:bg-gray-900"> <div className="flex items-center justify-between mb-2"> <h4 className="font-medium capitalize">{agent}</h4> <Badge variant={data.status == 'completed' ? 'default' : 'secondary'} className="text-xs">{data.status} </Badge> </div> <div className="space-y-1 text-sm"> <div className="flex justify-between"> <span className="text-gray-500">Issues:</span> <span className="font-medium">{data.issues.length}</span> </div> {data.metrics?.score !== undefined && ( <div className="flex justify-between"> <span className="text-gray-500">Score:</span> <span className="font-medium">{data.metrics.score}</span> </div> )} </div> </div> ),)} </div> </CardContent> </Card> ;</motion.div> </div> );
