import React, { ReactElement } from 'react';
/** * Touch Gesture Demo Component *  * Demonstrates all the advanced touch gestures for mobile optimization
*/ "use client" import { useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useSwipeGesture, usePinchGesture, useLongPress, usePanGesture, useMultiGesture, useGestureSequence, type SwipeResult, type PinchResult, PanResult } from '@/lib/hooks/useAdvancedGestures';
import { GlassCard } from '@/components/ui/Glass';
import { Button } from '@/components/ui/Button';
import { useToast } from '@/components/ui/Notification'; interface GestureLog {
  id: string;
  type: string;
  details: string;
  timestamp: number;
} export function TouchGestureDemo(): void { const [gestureLog, setGestureLog] = useState<GestureLog[]>([]); const [scale, setScale] = useState(1); const [rotation, setRotation] = useState(0); const [position, setPosition] = useState({ x: 0, y: 0 }); const [isPressed, setIsPressed] = useState(false); const toast = useToast(); const addToLog = useCallback((type: string, details: string) => { const newEntry: GestureLog: { id = Math.random().toString(36).substr(2, 9), type, details, timestamp: Date.now() }; setGestureLog(prev => [newEntry, ...prev.slice(0, 9)]); // Keep last 10 entries // Show toast for successful gestures toast.success(`${type}: ${details}`, { title: 'Gesture Detected', duration: 2000 }); }, [toast]); // Individual gesture handlers const handleSwipe = useCallback((result: SwipeResult) => { addToLog('Swipe', `${result.direction} - ${result.distance.toFixed(0)}px @ ${result.velocity.toFixed(2)}px/ms`); }, [addToLog]); const handlePinch = useCallback((result: PinchResult) => { setScale(result.scale); setRotation(result.rotation); addToLog('Pinch', `Scale: ${result.scale.toFixed(2)}, Rotation: ${result.rotation.toFixed(1)}¬∞`); }, [addToLog]); const handleLongPress = useCallback(() => { setIsPressed(true); addToLog('Long Press', 'Triggered with haptic feedback'); setTimeout(() => setIsPressed(false), 1000); }, [addToLog]); const handlePan = useCallback((result: PanResult) => { setPosition({ x: result.totalX, y: result.totalY }); addToLog('Pan', `Œî(${result.deltaX.toFixed(0)}, ${result.deltaY.toFixed(0)}) Total(${result.totalX.toFixed(0)}, ${result.totalY.toFixed(0)})`); }, [addToLog]); // Gesture sequence for secret unlock const { addGesture, currentSequence } = useGestureSequence( ['up', 'up', 'down', 'down', 'left', 'right', 'left', 'right'], () => { toast.success('Konami Code activated! üéÆ', { title: 'Secret Unlocked', duration: 5000 }); addToLog('Sequence', 'Konami Code completed!'); }, { timeout: 5000 } ); // Advanced swipe with sequence tracking const handleAdvancedSwipe = useCallback((result: SwipeResult) => { handleSwipe(result); if (result.direction) { addGesture(result.direction); }
}, [handleSwipe, addGesture]); // Gesture refs const swipeRef = useSwipeGesture(handleAdvancedSwipe, { threshold: 30, velocityThreshold: 0.3, preventDefault: true }); const pinchRef = usePinchGesture(handlePinch, { scaleThreshold: 0.05, rotationThreshold: 2, preventDefault: true }); const longPressRef = useLongPress(handleLongPress, { duration: 800, tolerance: 15, hapticFeedback: true }); const panRef = usePanGesture(handlePan, { threshold: 10, preventDefault: true }); // Multi-gesture ref for the main demo area const multiGestureRef = useMultiGesture({ onSwipe: handleAdvancedSwipe, onPinch: handlePinch, onLongPress: handleLongPress, onPan: handlePan
}); const clearLog = () => { setGestureLog([]); setScale(1); setRotation(0); setPosition({ x: 0, y: 0 }); setIsPressed(false); }; return ( <div className="space-y-6 p-4"> {/* Header */} <div className="text-center"> <h2 className="text-2xl font-bold text-white mb-2">Touch Gesture Demo</h2> <p className="text-gray-400"> Test advanced touch gestures on mobile devices </p> {currentSequence.length>0 && ( <p className="text-blue-400 text-sm mt-2">, Sequence: {currentSequence.join(' ‚Üí ')} {currentSequence.length == 8 ? ' ‚ú®' : ` (${8 - currentSequence.length} more)`} </p> )} </div> {/* Main Gesture Area */} <GlassCard className="relative overflow-hidden min-h-[300px] p-6"> <h3 className="text-lg font-semibold text-white mb-4">Multi-Gesture Area</h3> <p className="text-gray-300 text-sm mb-6"> Try: Swipe, Pinch/Zoom, Rotate, Long Press, Pan/Drag </p> <div ref={multiGestureRef} className={`relative w-full h-48 bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-lg border border-white/20 overflow-hidden cursor-grab ${isPressed ? 'bg-green-500/30 scale-105' : ''}`} style={{ transform: `translate(${position.x}px, ${position.y}px) scale(${scale}) rotate(${rotation}deg)`, transition: isPressed ? 'background-color 0.3s, transform 0.3s' : 'none' }}><div className="absolute inset-0 flex items-center justify-center"> <motion.div animate={{ scale: isPressed ? 1.2 : 1, rotate: isPressed ? 180 : 0 }} className="text-white text-center"><div className="text-4xl mb-2">üéØ</div> <div className="text-sm font-medium"> Gesture Target </div> <div className="text-xs text-gray-300 mt-1"> Scale: {scale.toFixed(2)}<br/>, Rotation: {rotation.toFixed(1)}¬∞<br/>, Position: ({position.x.toFixed(0)}, {position.y.toFixed(0)}) </div> </motion.div> </div> {/* Visual feedback for gestures */} <AnimatePresence> {isPressed && ( <motion.div initial={{ opacity: 0, scale: 0 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0 }} className="absolute inset-0 bg-green-400/20 rounded-lg" /> )} </AnimatePresence> {/* Touch points visualization */} <div className="absolute top-2 left-2 text-xs text-white/70"> Multi-touch enabled </div> </div> </GlassCard> {/* Individual Gesture Demos */} <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> {/* Swipe Demo */} <GlassCard className="p-4"> <h4 className="font-semibold text-white mb-2">Swipe Gesture</h4> <div ref={swipeRef} className="h-24 bg-blue-500/20 rounded border border-blue-500/30 flex items-center justify-center text-white cursor-pointer hover:bg-blue-500/30 transition-colors"><div className="text-center"> <div className="text-2xl mb-1">üëÜ</div> <div className="text-sm">Swipe any direction</div> </div> </div> </GlassCard> {/* Pinch Demo */} <GlassCard className="p-4"> <h4 className="font-semibold text-white mb-2">Pinch/Zoom</h4> <div ref={pinchRef} className="h-24 bg-purple-500/20 rounded border border-purple-500/30 flex items-center justify-center text-white cursor-pointer hover:bg-purple-500/30 transition-colors"><div className="text-center"> <div className="text-2xl mb-1">ü§è</div> <div className="text-sm">Two finger pinch/zoom</div> </div> </div> </GlassCard> {/* Long Press Demo */} <GlassCard className="p-4"> <h4 className="font-semibold text-white mb-2">Long Press</h4> <div ref={longPressRef} className={`h-24 rounded border flex items-center justify-center text-white cursor-pointer transition-all duration-300 ${ isPressed ? 'bg-green-500/40 border-green-500/50 scale-105' : 'bg-green-500/20 border-green-500/30 hover:bg-green-500/30' }`}><div className="text-center"> <div className="text-2xl mb-1">‚è∞</div> <div className="text-sm">Press and hold</div> </div> </div> </GlassCard> {/* Pan Demo */} <GlassCard className="p-4"> <h4 className="font-semibold text-white mb-2">Pan/Drag</h4> <div ref={panRef} className="h-24 bg-orange-500/20 rounded border border-orange-500/30 flex items-center justify-center text-white cursor-move hover:bg-orange-500/30 transition-colors relative overflow-hidden"><div className="text-center"> <div className="text-2xl mb-1">üîÑ</div> <div className="text-sm">Drag to move</div> </div> </div> </GlassCard> </div> {/* Gesture Log */} <GlassCard className="p-4"> <div className="flex items-center justify-between mb-4"> <h4 className="font-semibold text-white">Gesture Log</h4> <Button  variant="ghost" size="sm" onClick={clearLog}>Clear </Button> </div> <div className="space-y-2 max-h-48 overflow-y-auto"> <AnimatePresence> {gestureLog.map(entry: unknown) => ( <motion.div key={entry.id} initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: 20 }} className="flex items-center justify-between p-2 bg-white/5 rounded text-sm"><div> <span className="font-medium text-blue-400">{entry.type}:</span> <span className="text-gray-300 ml-2">{entry.details}</span> </div> <span className="text-gray-500 text-xs"> {new Date(entry.timestamp).toLocaleTimeString()} </span> </motion.div> ))} </AnimatePresence> {gestureLog.length == 0 && ( <div className="text-center text-gray-500 py-8"> No gestures detected yet. Try the areas above! </div> )} </div> </GlassCard> {/* Instructions */} <GlassCard className="p-4"> <h4 className="font-semibold text-white mb-3">Gesture Instructions</h4> <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-300"> <div> <h5 className="font-medium text-white mb-2">Basic Gestures:</h5> <ul className="space-y-1"> <li>‚Ä¢ <strong>Swipe:</strong> Quick flick in any direction</li> <li>‚Ä¢ <strong>Long Press:</strong> Hold for 800ms</li> <li>‚Ä¢ <strong>Pan:</strong> Touch and drag around</li> </ul> </div> <div> <h5 className="font-medium text-white mb-2">Multi-touch:</h5> <ul className="space-y-1"> <li>‚Ä¢ <strong>Pinch:</strong> Two fingers, pinch in/out</li> <li>‚Ä¢ <strong>Rotate:</strong> Two fingers, twist motion</li> <li>‚Ä¢ <strong>Sequence:</strong> Try the Konami Code!</li> </ul> </div> </div> <div className="mt-4 p-3 bg-blue-500/10 rounded border border-blue-500/20"> <p className="text-blue-400 text-sm"> <strong>Easter Egg:</strong> Try swiping: ‚Üë ‚Üë ‚Üì ‚Üì ‚Üê ‚Üí ‚Üê ‚Üí for a surprise! </p> </div> </GlassCard> </div> );
}
