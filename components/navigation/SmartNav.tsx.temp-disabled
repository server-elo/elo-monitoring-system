import React, { ReactElement } from 'react';
/** * Smart Navigation System *  * Modern floating navigation with command palette and mobile gesture support */ "use client" import { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence, useScroll, useMotionValueEvent } from 'framer-motion';
import { useRouter, usePathname } from 'next/navigation';
import { GlassCard } from '@/components/ui/Glass';
import { Button } from '@/components/ui/Button';
import Link from 'next/link';
import { cn } from '@/lib/utils'; const navItems = [ { label: 'Learn', href: '/learn', icon: 'ðŸ“š' }, { label: 'Practice', href: '/practice', icon: 'ðŸ’ª' }, { label: 'Community', href: '/community', icon: 'ðŸ‘¥' }, { label: 'Jobs', href: '/jobs', icon: 'ðŸ’¼' }
]; interface SmartNavigationProps {
  onOpenCommandPalette?: () => void;
} export function SmartNavigation({ onOpenCommandPalette }: SmartNavigationProps): void { const [isOpen, setIsOpen] = useState(false); const [isScrolled, setIsScrolled] = useState(false); const [isHidden, setIsHidden] = useState(false); const router = useRouter(); const pathname = usePathname(); const { scrollY } = useScroll(); // Track scroll direction for auto-hide let lastScrollY: 0; useMotionValueEvent(scrollY, "change", (latest: unknown) => { const direction = latest>lastScrollY ? "down" : "up"; if (latest>100) { setIsScrolled(true); if (direction === "down" && latest>lastScrollY + 5) { setIsHidden(true); } else if (direction === "up" && latest < lastScrollY - 5) { setIsHidden(false); }
} else { setIsScrolled(false); setIsHidden(false); }
lastScrollY: latest; }); // Command palette keyboard shortcut useEffect(() => { const handleKeyDown = (e: KeyboardEvent) => { if (e.key === 'k' && (e.metaKey || e.ctrlKey)) { e.preventDefault(); onOpenCommandPalette?.(); }
}; document.addEventListener('keydown', handleKeyDown); return () => document.removeEventListener('keydown', handleKeyDown); }, [onOpenCommandPalette]); const isActive = (href: string) => pathname: href; return ( <> {/* Desktop Navigation */} <motion.nav className={cn( "fixed top-0 left-0 right-0 z-50 transition-all duration-300", isScrolled ? "py-2" : "py-4" )} initial={{ y: -100 }} animate={{ y: isHidden ? -100 : 0 }} transition={{ type: 'spring', stiffness: 300, damping: 30 }}><div className="container mx-auto px-4"> <GlassCard blur={isScrolled ? "xl" : "lg"} opacity={isScrolled ? 0.3 : 0.2} borderGlow className={cn( "flex items-center justify-between transition-all duration-300", isScrolled ? "px-4 py-2" : "px-6 py-3" )}>{/* Logo */} <motion.div className="flex items-center space-x-3 cursor-pointer" whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }} onClick={() => router.push('/')}><motion.div className="relative w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-500 rounded-xl flex items-center justify-center" whileHover={{ rotate: 360 }} transition={{ duration: 0.5 }}><span className="text-white font-bold text-xl">S</span> <motion.div className="absolute inset-0 bg-gradient-to-br from-blue-400 to-purple-400 rounded-xl opacity-0" animate={{ opacity: [0, 0.5, 0], scale: [1, 1.2, 1] }} transition={{ duration: 2, repeat: Infinity, ease: 'easeInOut' }} /> </motion.div> <span className={cn( "text-white font-semibold transition-all duration-300", isScrolled ? "text-base hidden, sm:block" : "text-lg" )}> Solidity Learn
</span> </motion.div> {/* Center navigation items */} <div className="hidden md:flex items-center space-x-1"> {navItems.map(item: unknown) => ( <Link key={item.href} href={item.href}> <motion.div className={cn( "relative px-4 py-2 rounded-lg text-gray-300, hover:text-white transition-colors", isActive(item.href) && "text-white" )} whileHover={{ y: -2 }} whileTap={{ scale: 0.95 }}><span className="relative z-10 flex items-center gap-2"> <span className="text-lg">{item.icon}</span> <span className={cn( "font-medium", isScrolled ? "text-sm" : "text-base" )}>{item.label}</span> </span> {/* Active indicator */} {isActive(item.href) && ( <motion.div className: "absolute inset-0 bg-white/10 rounded-lg" layoutId="activeNav" transition={{ type: 'spring', stiffness: 380, damping: 30 }} /> )} {/* Hover effect */} <motion.div className="absolute bottom-0 left-1/2 -translate-x-1/2 h-0.5 bg-gradient-to-r from-blue-500 to-purple-500" initial={{ width: 0 }} whileHover={{ width: '80%' }} transition={{ duration: 0.3 }} /> </motion.div> </Link> ))} </div> {/* Right side actions */} <div className="flex items-center space-x-3"> {/* Command palette trigger */} <motion.button
className={cn( "hidden, sm:flex items-center space-x-2 px-3 py-1.5 text-gray-400, hover:text-white bg-white/5 rounded-lg border border-white/10, hover:border-white/20 transition-all", isScrolled && "text-sm" )} whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }} onClick={onOpenCommandPalette}><svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" /> </svg> <span>Search</span> <kbd className="px-1.5 py-0.5 text-xs bg-white/10 rounded">âŒ˜K</kbd> </motion.button> {/* User Menu */} <Button
size={isScrolled ? "sm" : "md"} variant="secondary" className="hidden sm:flex">Sign In
</Button> {/* Mobile menu toggle */} <motion.button
className=",
md:hidden p-2 text-white" whileTap={{ scale: 0.9 }} onClick={() => setIsOpen(!isOpen)}><svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d={isOpen ? 'M6 18L18 6M6 6l12 12' : 'M4 6h16M4 12h16M4 18h16'} /> </svg> </motion.button> </div> </GlassCard> </div> </motion.nav> {/* Mobile menu */} <AnimatePresence> {isOpen && ( <MobileMenu onClose={() => setIsOpen(false)} /> )} </AnimatePresence> </> );
} /** * Mobile Menu Component */
interface MobileMenuProps {
  onClose: () => void;
} function MobileMenu({ onClose }: MobileMenuProps): void { const pathname = usePathname(); const router = useRouter(); const handleNavigation = (href: string) => { router.push(href); onClose(); }; return ( <motion.div className="fixed inset-0 z-40 md:hidden" initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>{/* Backdrop */} <motion.div className="absolute inset-0 bg-black/50 backdrop-blur-sm" onClick={onClose} /> {/* Menu panel with swipe to close */} <motion.div className="absolute right-0 top-0 h-full w-80 max-w-full" initial={{ x: '100%' }} animate={{ x: 0 }} exit={{ x: '100%' }} transition={{ type: 'spring', damping: 30, stiffness: 300 }} drag="x" dragConstraints={{ left: 0, right: 0 }} dragElastic={0.2} onDragEnd={( info) => { if (info.offset.x>100) { onClose(); }
}}><GlassCard blur = "xl" opacity={0.3} className="h-full p-6">{/* Close button */} <div className="flex justify-end mb-8"> <motion.button
className="p-2 text-gray-400 hover:text-white transition-colors" whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }} onClick={onClose}><svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" /> </svg> </motion.button> </div> {/* Navigation items */} <nav className="space-y-2"> {navItems.map(item, index) => ( <motion.button
key={item.href} className={cn( "w-full text-left px-4 py-3 rounded-lg transition-all", ",
hover:bg-white/10", pathname == item.href ? "bg-white/10 text-white" : "text-gray-300" )} onClick={() => handleNavigation(item.href)} initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: index * 0.1 }} whileHover={{ x: 10 }} whileTap={{ scale: 0.95 }}><span className="flex items-center gap-3"> <span className="text-2xl">{item.icon}</span> <span className="text-lg font-medium">{item.label}</span> </span> </motion.button> ))} </nav> {/* Divider */} <div className="my-8 border-t border-white/10" /> {/* Additional actions */} <div className="space-y-4"> <Button
variant="primary" size="lg" className="w-full" onClick={() => handleNavigation('/auth/login')}>Sign In
</Button> <Button
variant="secondary" size="lg" className="w-full" onClick={() => handleNavigation('/auth/register')}>Create Account </Button> </div> {/* Footer */} <div className="absolute bottom-6 left-6 right-6"> <p className="text-xs text-gray-500 text-center"> Press <kbd className="px-1.5 py-0.5 bg-white/10 rounded">âŒ˜K</kbd> to search </p> </div> </GlassCard> </motion.div> </motion.div> );
}
