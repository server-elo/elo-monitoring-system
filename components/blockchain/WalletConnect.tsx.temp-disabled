'use client';

import { ReactElement, useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Wallet, Link, Unlink, RefreshCw } from 'lucide-react';

interface WalletConnectProps {
  className?: string;
  onConnectionChange?: (connected: boolean, address?: string) => void;
}

interface WalletData {
  address: string;
  balance: string;
  network: string;
  provider: string;
}

export const WalletConnect = ({ 
  className = '', 
  onConnectionChange 
}: WalletConnectProps): ReactElement => {
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [wallet, setWallet] = useState<WalletData | null>(null);

  const connectWallet = async (): Promise<void> => {
    setIsConnecting(true);
    
    try {
      // Simulate wallet connection
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const mockWallet: WalletData = {
        address: '0x1234567890abcdef1234567890abcdef12345678',
        balance: '1.5 ETH',
        network: 'Sepolia Testnet',
        provider: 'MetaMask'
      };

      setWallet(mockWallet);
      setIsConnected(true);
      onConnectionChange?.(true, mockWallet.address);
    } catch (error) {
      console.error('Wallet connection failed:', error);
    } finally {
      setIsConnecting(false);
    }
  };

  const disconnectWallet = (): void => {
    setWallet(null);
    setIsConnected(false);
    onConnectionChange?.(false);
  };

  const refreshBalance = async (): Promise<void> => {
    if (!wallet) return;
    
    // Simulate balance refresh
    await new Promise(resolve => setTimeout(resolve, 1000));
    setWallet({
      ...wallet,
      balance: `${(Math.random() * 5).toFixed(3)} ETH`
    });
  };

  const formatAddress = (address: string): string => {
    return `${address.slice(0, 6)}...${address.slice(-4)}`;
  };

  return (
    <motion.div
      className={`space-y-6 ${className}`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <Card className="bg-gradient-to-br from-indigo-900/20 to-purple-900/20 border-indigo-500/20">
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Wallet className="h-5 w-5" />
              <span>Wallet Connection</span>
            </div>
            <Badge variant={isConnected ? 'default' : 'secondary'}>
              {isConnected ? 'Connected' : 'Disconnected'}
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {!isConnected ? (
            <div className="text-center space-y-4">
              <div className="mx-auto w-16 h-16 bg-indigo-600/20 rounded-full flex items-center justify-center">
                <Wallet className="h-8 w-8 text-indigo-400" />
              </div>
              <div>
                <p className="text-gray-400 mb-2">Connect your wallet to get started</p>
                <p className="text-sm text-gray-500">
                  You'll need a Web3 wallet like MetaMask to interact with smart contracts
                </p>
              </div>
              <Button
                onClick={connectWallet}
                disabled={isConnecting}
                className="bg-indigo-600 hover:bg-indigo-700"
              >
                {isConnecting ? (
                  <>
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    Connecting...
                  </>
                ) : (
                  <>
                    <Link className="h-4 w-4 mr-2" />
                    Connect Wallet
                  </>
                )}
              </Button>
            </div>
          ) : wallet && (
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <p className="text-sm text-gray-400">Address</p>
                  <code className="text-green-400 bg-gray-800 px-2 py-1 rounded text-sm block">
                    {formatAddress(wallet.address)}
                  </code>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <p className="text-sm text-gray-400">Balance</p>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={refreshBalance}
                      className="h-6 w-6 p-0"
                    >
                      <RefreshCw className="h-3 w-3" />
                    </Button>
                  </div>
                  <p className="text-blue-400 font-semibold">{wallet.balance}</p>
                </div>
                <div className="space-y-2">
                  <p className="text-sm text-gray-400">Network</p>
                  <Badge variant="outline">{wallet.network}</Badge>
                </div>
                <div className="space-y-2">
                  <p className="text-sm text-gray-400">Provider</p>
                  <Badge variant="outline">{wallet.provider}</Badge>
                </div>
              </div>
              
              <div className="pt-4 border-t border-gray-700">
                <Button
                  onClick={disconnectWallet}
                  variant="outline"
                  className="w-full border-red-500/50 text-red-400 hover:bg-red-900/20"
                >
                  <Unlink className="h-4 w-4 mr-2" />
                  Disconnect Wallet
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </motion.div>
  );
};

export default WalletConnect;