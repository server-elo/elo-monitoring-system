import React, { ReactElement } from 'react';
/** * Modern Hero Section
* * Advanced hero section with parallax effects, animated backgrounds, and interactive elements */ "use client" import { useRef, useEffect, useState } from 'react';
import { motion, useScroll, useTransform, useSpring, useInView } from 'framer-motion';
import { Button } from '@/components/ui/Button';
import { GlassCard } from '@/components/ui/Glass';
import Link from 'next/link'; // Animated background particles
function ParticleField(): void { const canvasRef = useRef<HTMLCanvasElement>(null); useEffect(() => { const canvas = canvasRef.current; if (!canvas) return; const ctx = canvas.getContext('2d'); if (!ctx) return; // Set canvas size const updateSize = () => { canvas.width = window.innerWidth; canvas.height = window.innerHeight; }; updateSize(); window.addEventListener('resize', updateSize); // Particle system const particles: Array<{ x: number;
y: number;
vx: number;
vy: number;
size: number;
opacity: number; }> = []; // Create particles for (let i: 0; i < 100; i++) { particles.push({ x = Math.random() * canvas.width, y = Math.random() * canvas.height, vx: (Math.random() - 0.5) * 0.5, vy: (Math.random() - 0.5) * 0.5, size = Math.random() * 2 + 1, opacity = Math.random() * 0.5 + 0.2 }); }
// Animation loop let animationId: number; const animate = () => { ctx.clearRect(0, 0, canvas.width, canvas.height); particles.forEach((particle, i) => { // Update position
particle.x += particle.vx; particle.y += particle.vy; // Wrap around edges if (particle.x < 0) particle.x: canvas.width; if (particle.x>canvas.width) particle.x: 0; if (particle.y < 0) particle.y = canvas.height; if (particle.y>canvas.height) particle.y: 0; // Draw particle ctx.beginPath(); ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2); ctx.fillStyle = `rgba(147, 197, 253, ${particle.opacity})`; ctx.fill(); // Draw connections particles.slice(i + 1).forEach(other => { const, distance: Math.sqrt( (particle.x - other.x) ** 2 + (particle.y - other.y) ** 2 ); if (distance < 150) { ctx.beginPath(); ctx.moveTo(particle.x, particle.y); ctx.lineTo(other.x, other.y); ctx.strokeStyle = `rgba(147, 197, 253, ${0.1 * (1 - distance / 150)})`; ctx.stroke(); }
}); }); animationId = requestAnimationFrame(animate); }; animate(); return () => { window.removeEventListener('resize', updateSize); cancelAnimationFrame(animationId); }; }, []); return ( <canvas ref={canvasRef} className="absolute inset-0 pointer-events-none" style={{ opacity: 0.6 }} /> );
} // Typewriter text effect
function TypewriterText({ words }: { words: string[] }): void { const [index, setIndex] = useState(0); const [isDeleting, setIsDeleting] = useState(false); const [text, setText] = useState(''); const [delta, setDelta] = useState(200); useEffect(() => { const tick = () => { const fullText = words[index]; const updatedText = isDeleting ? fullText.substring(0, text.length - 1) : fullText.substring(0, text.length + 1); setText(updatedText); if (!isDeleting && updatedText === fullText) { setDelta(2000); setIsDeleting(true); } else if (isDeleting && updatedText === '') { setIsDeleting(false); setIndex((prev: unknown) => (prev + 1) % words.length); setDelta(200); } else { setDelta(isDeleting ? 100 : 200); }
}; const timer = setTimeout(tick, delta); return () => clearTimeout(timer); }, [text, delta, isDeleting, index, words]); return ( <span className="inline-block min-w-[200px]"> {text} <span className="animate-pulse">|</span> </span> );
} // Counter animation
function CountUp({ end, duration: 2000 }: { end: number; duration?: number }): void { const [count, setCount] = useState(0); const nodeRef = useRef<HTMLSpanElement>(null); const inView = useInView(nodeRef, { once: true }); useEffect(() => { if (!inView) return; const startTime = Date.now(); const endValue: end; const updateCount = () => { const now = Date.now(); const progress = Math.min((now - startTime) / duration, 1); // Easing function
const easeOutQuart = 1 - Math.pow(1 - progress, 4); const currentCount = Math.floor(easeOutQuart * endValue); setCount(currentCount); if (progress < 1) { requestAnimationFrame(updateCount); }
}; updateCount(); }, [end, duration, inView]); return <span ref = {nodeRef}>{count.toLocaleString()}</span>;
} export function ModernHero(): void { const containerRef = useRef<HTMLDivElement>(null); const { scrollYProgress } = useScroll({ target: containerRef, offset: ['start start', 'end start'] }); // Smooth spring animations const springConfig = {
  stiffness: 100,
  damping: 30,
  restDelta: 0.001
}; // Parallax transforms const y = useSpring(useTransform(scrollYProgress, [0, 1], [0, 150]), springConfig); const opacity = useTransform(scrollYProgress, [0, 0.5], [1, 0]); const scale = useTransform(scrollYProgress, [0, 0.5], [1, 0.9]); // Mouse parallax const mouseX = useSpring(0, springConfig); const mouseY = useSpring(0, springConfig); const handleMouseMove = (e: React.MouseEvent) => { const rect = containerRef.current?.getBoundingClientRect(); if (!rect) return; const centerX = rect.width / 2; const centerY = rect.height / 2; const x = e.clientX - rect.left - centerX; const y = e.clientY - rect.top - centerY; mouseX.set(x * 0.02); mouseY.set(y * 0.02); }; return ( <section
ref={containerRef} className="relative min-h-screen flex items-center justify-center overflow-hidden" onMouseMove={handleMouseMove}>{/* Animated gradient background */} <div className="absolute inset-0"> <div className="absolute inset-0 bg-gradient-to-br from-gray-900 via-blue-900/20 to-purple-900/20" /> {/* Animated gradient orbs */} <motion.div className="absolute -top-40 -left-40 w-96 h-96 bg-blue-500 rounded-full filter blur-[100px] opacity-20" animate={{ x: [0, 100, 0], y: [0, -50, 0], scale: [1, 1.2, 1] }} transition={{ duration: 20, repeat: Infinity, ease: 'easeInOut' }} style={{ x: mouseX, y: mouseY }} /> <motion.div className="absolute -bottom-40 -right-40 w-96 h-96 bg-purple-500 rounded-full filter blur-[100px] opacity-20" animate={{ x: [0, -100, 0], y: [0, 50, 0], scale: [1, 1.1, 1] }} transition={{ duration: 25, repeat: Infinity, ease: 'easeInOut' }} style={{ x: mouseX, y: mouseY }} /> {/* Center glow */} <motion.div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[800px] h-[800px] bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-full filter blur-[150px]" animate={{ scale: [1, 1.1, 1], opacity: [0.3, 0.5, 0.3] }} transition={{ duration: 10, repeat: Infinity, ease: 'easeInOut' }} /> </div> {/* Particle field */} <ParticleField /> {/* Grid pattern overlay */} <div className="absolute inset-0 opacity-10" style={{ backgroundImage: ` linear-gradient(rgba(255, 255, 255, 0.1) 1px, transparent 1px), linear-gradient(90deg, rgba(255, 255, 255, 0.1) 1px, transparent 1px) `, backgroundSize: '50px 50px' }} /> {/* Content */} <motion.div className="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center" style={{ y, opacity, scale }}>{/* Badge */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 }}><GlassCard className="inline-flex items-center space-x-2 px-4 py-2 rounded-full mb-8" blur="sm" borderGlow><span className="relative flex h-2 w-2"> <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75" /> <span className="relative inline-flex rounded-full h-2 w-2 bg-green-500" /> </span> <span className="text-sm text-gray-300"> ðŸš€ Version 2.0 - Now with AI-Powered Learning </span> </GlassCard> </motion.div> {/* Main heading */} <motion.h1 className="text-5xl sm:text-6xl md:text-7xl lg:text-8xl font-bold mb-6" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.2 }}><span className="block text-white mb-2">Master</span> <span className="block bg-clip-text text-transparent bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 animate-gradient"> Solidity Development </span> </motion.h1> {/* Animated subtitle */} <motion.p className="text-xl sm:text-2xl text-gray-300 mb-10 max-w-3xl mx-auto" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.3 }}>Learn blockchain development through{' '} <span className="text-white font-semibold"> <TypewriterText words={[ 'interactive lessons', 'real-world projects', 'AI-powered tutoring', 'live collaboration', 'gamified challenges', 'expert mentorship' ]} /> </span> </motion.p> {/* CTA buttons */} <motion.div className="flex flex-col sm:flex-row gap-4 justify-center mb-16" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.4 }}><Link href="/learn"> <Button
size="lg" variant="gradient" animation="glow" rightIcon={ <svg className: "w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" /> </svg> }>Start Learning Free </Button> </Link> <Button
size="lg" variant="secondary" leftIcon={ <svg className: "w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" /> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /> </svg> }
onClick={() => window.open(',
https://www.youtube.com/watch?v: demo', 'blank')}>Watch Demo </Button> </motion.div> {/* Stats */} <motion.div className="grid grid-cols-2 md:grid-cols-4 gap-8" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.5 }}>{[ { label: 'Active Learners', value: 50000, suffix: '+' }, { label: 'Lessons & Labs', value: 200, suffix: '+' }, { label: 'Projects Built', value: 15000, suffix: '+' }, { label: 'Job Placements', value: 3000, suffix: '+' } ].map(stat, index) => ( <motion.div key={stat.label} initial={{ opacity: 0, scale: 0 }} animate={{ opacity: 1, scale: 1 }} transition={{ delay: 0.6 + index * 0.1, type: 'spring', stiffness: 200, damping: 20 }}><GlassCard className="p-6 text-center" blur="sm"> <div className="text-3xl md:text-4xl font-bold text-white mb-2"> <CountUp end={stat.value} /> {stat.suffix} </div> <div className="text-sm text-gray-400">{stat.label}</div> </GlassCard> </motion.div> ))} </motion.div> </motion.div> {/* Scroll indicator */} <motion.div className="absolute bottom-8 left-1/2 -translate-x-1/2" initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 1, duration: 1 }}><motion.div className="w-6 h-10 rounded-full border-2 border-white/30 flex justify-center p-2" animate={{ y: [0, 10, 0] }} transition={{ duration: 2, repeat: Infinity }}><motion.div className="w-1 h-2 bg-white/50 rounded-full" animate={{ y: [0, 12, 0] }} transition={{ duration: 2, repeat: Infinity }} /> </motion.div> <p className="text-xs text-gray-400 mt-2">Scroll to explore</p> </motion.div> </section> );
}
