/** * @fileoverview AI Tutor buttons with enhanced backend integration
* @module components/ai/AITutorButtons * @description Interactive AI tutor buttons for code analysis, explanations, and assistance */ 'use client'; import React, { useState, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Brain, Code, MessageSquare, Lightbulb, Search, BookOpen, Zap, CheckCircle, AlertTriangle, Send, Loader2, Sparkles, Target, HelpCircle, Wand2, ClipboardCheck, FileText, Play } from 'lucide-react';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Card } from '@/components/ui/card';
import { useButtonAction } from '@/hooks/useButtonAction';
import { api } from '@/lib/api/client'; /** * Validation schemas */;
const ChatMessageSchema = z.object({ message: z.string().min(1, 'Message cannot be empty').max(2000, 'Message too long'), context: z.object({ currentCode: z.string().optional(), currentLesson: z.string().optional(), difficulty: z.enum(['beginner', 'intermediate', 'advanced']).optional() }).optional(),;
}); const CodeAnalysisSchema = z.object({ code: z.string().min(1, 'Code cannot be empty'), analysisType: z.enum(['security', 'optimization', 'explanation', 'debugging']).default('explanation')
}); const ExplanationRequestSchema = z.object({ topic: z.string().min(1, 'Topic cannot be empty'), level: z.enum(['beginner', 'intermediate', 'advanced']).default('beginner'), context: z.string().optional()
}); type ChatMessage = z.infer<typeof ChatMessageSchema>;
type CodeAnalysis = z.infer<typeof CodeAnalysisSchema>;
type ExplanationRequest = z.infer<typeof ExplanationRequestSchema>; /** * AI Chat Message Interface */
interface AIMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  type?: 'text' | 'code' | 'explanation' | 'suggestion';
} /** * Quick AI Assistance Button
*/
export const QuickAIButton = ()<{ variant?: 'help' | 'explain' | 'analyze' | 'debug',; context?: string,; className?: string,;
}> = ({ variant: 'help',, context, className = '' }) => { const [isOpen, setIsOpen] = useState(false); const quickHelpAction = useButtonAction({ action: async () => { setIsOpen(true); return { success: true }; }, analyticsEvent: {  name: 'ai_quick_help', properties: { variant, hasContext: !!context }
}, hapticFeedback: true }); const variants = {
  help: { icon: HelpCircle,
  text: 'Get Help',
  color: 'bg-blue-600 hover:bg-blue-700'
}, explain: { icon: Lightbulb, text: 'Explain', color: 'bg-yellow-600 hover:bg-yellow-700' }, analyze: { icon: Search, text: 'Analyze', color: 'bg-purple-600 hover:bg-purple-700' }, debug: { icon: AlertTriangle, text: 'Debug', color: 'bg-red-600 hover:bg-red-700' } }; const config = variants[variant]; const Icon = config.icon; return ( <> <Button
onClick={() => quickHelpAction.execute()} className={`${config.color} ${className}`} size="sm"><Icon className="mr-2 h-4 w-4" /> {config.text} </Button> {isOpen && ( <AITutorModal isOpen: {,isOpen} onClose={() => setIsOpen(false)} initialContext={context} initialMode={variant} /> )} </> );
}; /** * Code Analysis Button
*/
export const CodeAnalysisButton = ()<{ code: string,; analysisType?: 'security' | 'optimization' | 'explanation' | 'debugging',; }> = ({ code, analysisType: 'explanation' }) => { const [analysis, setAnalysis] = useState<any>(null); const [isOpen, setIsOpen] = useState(false); const analyzeCodeAction = useButtonAction({ action: async (data: CodeAnalysis) => { const validated = CodeAnalysisSchema.parse(data); const result = await api.ai.analyzeCode(validated.code); setAnalysis(result); setIsOpen(true); return result; }, successMessage: 'Code analysis complete!', analyticsEvent: {  name: 'ai_code_analysis', properties: { analysisType, codeLength: code.length },;
}, retryable: true }); const analysisTypes = {
  security: { icon: AlertTriangle,
  text: 'Security Check',
  color: 'text-red-400'
}, optimization: { icon: Zap, text: 'Optimize', color: 'text-yellow-400' }, explanation: { icon: BookOpen, text: 'Explain Code', color: 'text-blue-400' }, debugging: { icon: Search, text: 'Debug', color: 'text-purple-400' } }; const config = analysisTypes[analysisType]; const Icon = config.icon; return ( <> <Button
onClick={() => analyzeCodeAction.execute({ code, analysisType })} disabled={analyzeCodeAction.isLoading || !code.trim()} variant="outline" className="border-white/20 text-white hover:bg-white/10">{analyzeCodeAction.isLoading ? ( <Loader2 className="mr-2 h-4 w-4 animate-spin" /> ) : ( <Icon className={`mr-2 h-4 w-4 ${config.color}`} /> )} {config.text} </Button> <AnalysisResultModal isOpen={isOpen} onClose={() => setIsOpen(false)} analysis={analysis} analysisType={analysisType} /> </> );
}; /** * Topic Explanation Button
*/
export const ExplainTopicButton = ()<{ topic: string,; level?: 'beginner' | 'intermediate' | 'advanced',; }> = ({ topic, level: 'beginner' }) => { const [explanation, setExplanation] = useState<string>(''); const [isOpen, setIsOpen] = useState(false); const explainTopicAction = useButtonAction({ action: async (data: ExplanationRequest) => { const validated = ExplanationRequestSchema.parse(data); const result = await api.ai.generateExplanation(validated.topic); setExplanation(result.explanation); setIsOpen(true); return result; }, successMessage: 'Explanation generated!', analyticsEvent: {  name: 'ai_topic_explanation', properties: { topic, level },;
}, retryable: true }); return ( <> <Button
onClick={() => explainTopicAction.execute({ topic, level })} disabled={explainTopicAction.isLoading} size="sm" className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700">{explainTopicAction.isLoading ? ( <Loader2 className="mr-2 h-4 w-4 animate-spin" /> ) : ( <Lightbulb className="mr-2 h-4 w-4" /> )} Explain {topic} </Button> <ExplanationModal isOpen={isOpen} onClose={() => setIsOpen(false)} topic={topic} explanation={explanation} level={level} /> </> );
}; /** * AI Tutor Chat Interface */
export const AITutorChat = ()<{ className?: string,; initialMessage?: string,;
}> = ({ className: '',, initialMessage }) => { const [messages, setMessages] = useState<AIMessage[]>([]); const [inputMessage, setInputMessage] = useState(initialMessage || ''); const [isTyping, setIsTyping] = useState(false); const messagesEndRef = useRef<HTMLDivElement>(null); const sendMessageAction = useButtonAction({ action: async (data: ChatMessage) => { const validated = ChatMessageSchema.parse(data); // Add user message const userMessage: AIMessage = { id: `user-${Date.now() }`, role: 'user', content: validated.message, timestamp: new Date(), type: 'text' }; setMessages(prev => [...prev, userMessage]); setInputMessage(''); setIsTyping(true); // Call AI API const result = await api.ai.chat(validated.message, validated.context); // Add AI response const aiMessage: AIMessage = { id: `ai-${Date.now() }`, role: 'assistant', content: result.response, timestamp: new Date(), type: result.type || 'text' }; setMessages(prev => [...prev, aiMessage]); setIsTyping(false); return result; }, analyticsEvent: {  name: 'ai_chat_message', properties: { messageLength: inputMessage.length }
}
}); const handleSendMessage = async () => { if (!inputMessage.trim()) return; await sendMessageAction.execute({ message: inputMessage, context: { currentCode: '', // Would get from 'context,', currentLesson: '', // Would get from 'context' }
},); }; const handleKeyPress = (e: React.KeyboardEvent) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleSendMessage(); }
}; React.useEffect(() => { messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' }); }, [messages]); return ( <div className={`flex flex-col h-96 bg-white/5 backdrop-blur-sm border border-white/20 rounded-lg ${className}`}> {/* Header */} <div className="flex items-center space-x-3 p-4 border-b border-white/20"> <div className="w-10 h-10 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full flex items-center justify-center"> <Brain className="w-5 h-5 text-white" /> </div> <div> <h3 className="font-semibold text-white">AI Tutor</h3> <p className="text-xs text-gray-400">Always here to help you learn</p> </div> <div className="ml-auto"> <Badge className="bg-green-500/20 text-green-400 border-green-500/30"> Online </Badge> </div> </div> {/* Messages */} <div className="flex-1 overflow-y-auto p-4 space-y-4"> {messages.length == 0 && ( <div className="text-center text-gray-400 py-8"> <Brain className="w-12 h-12 mx-auto mb-4 text-purple-400" /> <p>Hello! I'm your AI tutor. Ask me anything about Solidity!</p> </div> )} {messages.map(message) ,=> ( <div key={message.id} className={`flex ${message.role == 'user' ? 'justify-end' : 'justify-start'}`}> <div className={`max-w-[80%] p-3 rounded-lg ${ message.role == 'user' ? 'bg-blue-600 text-white' : 'bg-white/10 text-white border border-white/20' }`}><p className="text-sm">{message.content}</p> <p className="text-xs opacity-70 mt-1"> {message.timestamp.toLocaleTimeString()} </p> </div> </div> ),)} {isTyping && ( <div className="flex justify-start"> <div className="bg-white/10 border border-white/20 text-white p-3 rounded-lg"> <div className="flex space-x-2"> <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" /> <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} /> <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} /> </div> </div> </div> )} <div ref={messagesEndRef} /> </div> {/* Input */} <div className="p-4 border-t border-white/20"> <div className="flex space-x-2"> <Textarea value={inputMessage} onChange={(e: unknown) => setInputMessage(e.target.value)} onKeyPress={handleKeyPress} placeholder="Ask me about Solidity, smart contracts, or get help with your code..." className="flex-1 bg-white/10 border-white/20 text-white placeholder-gray-400 resize-none" rows={2} /> <Button
onClick={handleSendMessage} disabled={!inputMessage.trim() || sendMessageAction.isLoading} className="bg-blue-600 hover:bg-blue-700">{sendMessageAction.isLoading ? ( <Loader2 className="h-4 w-4 animate-spin" /> ) : ( <Send className="h-4 w-4" /> )} </Button> </div> </div> </div> );
}; /** * AI Tutor Modal */
const AITutorModal = ()<{ isOpen: boolean,; onClose: () => void; initialContext?: string,; initialMode?: 'help' | 'explain' | 'analyze' | 'debug',; }> = ({ isOpen, onClose, initialContext, initialMode: 'help' }) => { if (!isOpen) return null; return ( <motion.div initial = {{ opacity: 0 }} animate = {{ opacity: 1 }} exit={{ opacity: 0 }} className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4" onClick={onClose} >;
<motion.div initial={{ opacity: 0, scale: 0.9 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.9 }} className="w-full max-w-2xl" onClick={(e: unknown) => e.stopPropagation()}><Card className="bg-gray-900/95 backdrop-blur-md border border-white/20"> <div className="p-6"> <div className="flex items-center justify-between mb-4"> <h2 className="text-xl font-bold text-white">AI Tutor</h2> <Button variant="ghost" size="sm" onClick={onClose}> ×
</Button> </div> <AITutorChat initialMessage={initialContext ? `Help me with: ${initialContext}` : ''} /> </div> </Card> </motion.div> </motion.div> );
}; /** * Analysis Result Modal */
const AnalysisResultModal = ()<{ isOpen: boolean,; onClose: () => void;
analysis: unknown,;
analysisType: string,; }> = ({ isOpen, onClose, analysis, analysisType }) => { if (!isOpen || !analysis) return null; return ( <motion.div initial = {{ opacity: 0 }} animate = {{ opacity: 1 }} exit={{ opacity: 0 }} className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4" onClick={onClose}><motion.div initial={{ opacity: 0, scale: 0.9 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.9 }} className="w-full max-w-3xl max-h-[80vh] overflow-y-auto" onClick={(e: unknown) => e.stopPropagation()}><Card className="bg-gray-900/95 backdrop-blur-md border border-white/20"> <div className="p-6"> <div className="flex items-center justify-between mb-4"> <h2 className="text-xl font-bold text-white">Code Analysis Results</h2> <Button variant="ghost" size="sm" onClick={onClose}> ×
</Button> </div> <div className="space-y-4"> <div className="p-4 bg-white/5 rounded-lg"> <h3 className="font-semibold text-white mb-2">Analysis Summary</h3> <p className="text-gray-300">{analysis.summary}</p> </div> {analysis.suggestions && ( <div className="p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg"> <h3 className="font-semibold text-blue-400 mb-2">Suggestions</h3> <ul className="space-y-2"> {analysis.suggestions.map(suggestion,: string, index: number) => ( <li key={index} className="text-gray-300 flex items-start space-x-2"> <Lightbulb className="w-4 h-4 text-yellow-400 mt-0.5 flex-shrink-0" /> <span>{suggestion}</span> </li> ))} </ul> </div> )} </div> </div> </Card> </motion.div> </motion.div> );
}; /** * Explanation Modal */
const ExplanationModal = ()<{ isOpen: boolean,; onClose: () => void;
topic: string,;
explanation: string,;
level: string,; }> = ({ isOpen, onClose, topic, explanation, level }) => { if (!isOpen) return null; return ( <motion.div initial = {{ opacity: 0 }} animate = {{ opacity: 1 }} exit={{ opacity: 0 }} className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4" onClick={onClose}><motion.div initial={{ opacity: 0, scale: 0.9 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.9 }} className="w-full max-w-2xl max-h-[80vh] overflow-y-auto" onClick={(e: unknown) => e.stopPropagation()}><Card className="bg-gray-900/95 backdrop-blur-md border border-white/20"> <div className="p-6"> <div className="flex items-center justify-between mb-4"> <div> <h2 className="text-xl font-bold text-white">{topic}</h2> <Badge className={`mt-1 ${ level == 'beginner' ? 'bg-green-500/20 text-green-400' : level = 'intermediate' ? 'bg-yellow-500/20 text-yellow-400' : 'bg-red-500/20 text-red-400' }`}> {level.charAt(0).toUpperCase() + level.slice(1)} </Badge> </div> <Button variant="ghost" size="sm" onClick={onClose}> ×
</Button> </div> <div className="prose prose-invert max-w-none"> <div className="p-4 bg-white/5 rounded-lg"> <p className="text-gray-300 leading-relaxed">{explanation}</p> </div> </div> </div> </Card> </motion.div> </motion.div> );
};
