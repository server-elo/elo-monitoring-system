import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { EnhancedSecurityMiddleware } from "./lib/security/enhanced-middleware";

// Type definitions for protected routes
type ProtectedRouteConfig = {
  requireAuth: boolean;
  roles?: string[];
  redirectTo: string;
};

// Define protected routes and their requirements
const PROTECTED_ROUTES: Record<string, ProtectedRouteConfig> = {
  // Admin routes - require ADMIN role
  "/admin": {
    roles: ["ADMIN"],
    requireAuth: true,
    redirectTo: "/auth/login",
  },
  // Profile routes - require authentication
  "/profile": {
    requireAuth: true,
    redirectTo: "/auth/login",
  },
  // Settings routes - require authentication
  "/settings": {
    requireAuth: true,
    redirectTo: "/auth/login",
  },
  // Dashboard - require authentication
  "/dashboard": {
    requireAuth: true,
    redirectTo: "/auth/login",
  },
};

// API routes that require authentication
const PROTECTED_API_ROUTES = [
  "/api/user",
  "/api/profile",
  "/api/settings",
  "/api/admin",
];

// Helper function to check if a path matches a protected route
function findProtectedRoute(pathname: string): ProtectedRouteConfig | null {
  // Check exact match first
  if (PROTECTED_ROUTES[pathname]) {
    return PROTECTED_ROUTES[pathname];
  }
  // Check if the path starts with any protected route
  for (const route in PROTECTED_ROUTES) {
    if (pathname.startsWith(route)) {
      return PROTECTED_ROUTES[route];
    }
  }
  return null;
}

// Helper function to check if a path is a protected API route
function isProtectedApiRoute(pathname: string): boolean {
  return PROTECTED_API_ROUTES.some((route: string) =>
    pathname.startsWith(route),
  );
}

export async function middleware(request: NextRequest): Promise<NextResponse> {
  // Apply enhanced security middleware first
  const securityResponse = await EnhancedSecurityMiddleware.handle(request);
  
  if (securityResponse && securityResponse.status !== 200) {
    return securityResponse;
  }

  const { pathname } = request.nextUrl;

  // Skip additional processing for static files
  if (
    pathname.startsWith('/_next') ||
    pathname.startsWith('/favicon.ico')
  ) {
    return securityResponse || NextResponse.next();
  }

  // For demo purposes, allow all routes but apply security headers
  // In production, you would check authentication here
  return securityResponse || NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - api/ (API routes - handle separately)
     */
    "/((?!_next/static|_next/image|favicon.ico|api/).*)",
  ],
};