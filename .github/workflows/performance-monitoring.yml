name: Performance Monitoring & Bundle Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  CACHE_DEPENDENCY_PATH: 'package-lock.json'

jobs:
  bundle-analysis:
    name: Bundle Analysis & Performance Budget
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Need previous commit for comparison

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          npm run build
          npm run export-bundle-stats
        env:
          NODE_ENV: production
          ANALYZE_BUNDLE: true

      - name: Run bundle analysis
        id: bundle-analysis
        run: |
          npm run analyze-bundle
          echo "BUNDLE_REPORT_PATH=.next/bundle-analysis-report.md" >> $GITHUB_OUTPUT
        env:
          CI: true

      - name: Upload bundle analysis results
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis-${{ github.sha }}
          path: |
            .next/bundle-analysis-report.md
            .next/bundle-analysis-history.json
            .next/webpack-stats.json
          retention-days: 30

      - name: Comment bundle analysis on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '.next/bundle-analysis-report.md';
            
            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');
              
              // Find existing comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('Bundle Analysis Report')
              );
              
              const commentBody = `## 📊 Bundle Analysis Report
              
              ${report}
              
              ---
              <sub>🤖 This comment is automatically updated on each push</sub>`;
              
              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: commentBody
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: commentBody
                });
              }
            }

      - name: Check budget violations
        run: |
          if [ -f ".next/budget-violations.json" ]; then
            echo "❌ Budget violations detected!"
            cat .next/budget-violations.json
            exit 1
          else
            echo "✅ All budget checks passed!"
          fi

  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: bundle-analysis
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and start application
        run: |
          npm run build
          npm run start &
          sleep 30 # Wait for server to start
        env:
          NODE_ENV: production
          PORT: 3000

      - name: Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/lessons
            http://localhost:3000/dashboard
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports-${{ github.sha }}
          path: .lighthouseci/
          retention-days: 30

  core-web-vitals:
    name: Core Web Vitals Monitoring
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Puppeteer
        run: |
          npm install puppeteer
          npx puppeteer browsers install chrome

      - name: Run Core Web Vitals test
        run: |
          npm run test:web-vitals
        env:
          NODE_ENV: production

      - name: Upload Web Vitals results
        uses: actions/upload-artifact@v4
        with:
          name: web-vitals-${{ github.sha }}
          path: .next/web-vitals-report.json
          retention-days: 30

  dependency-audit:
    name: Security & Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate --json > security-audit.json || true
          
      - name: Run dependency analysis
        run: |
          npx depcheck --json > dependency-analysis.json || true
          npx license-checker --json > license-report.json || true

      - name: Check for high/critical vulnerabilities
        run: |
          HIGH_VULNS=$(cat security-audit.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat security-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "High severity vulnerabilities: $HIGH_VULNS"
          echo "Critical severity vulnerabilities: $CRITICAL_VULNS"
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found!"
            exit 1
          elif [ "$HIGH_VULNS" -gt 5 ]; then
            echo "⚠️ Too many high severity vulnerabilities!"
            exit 1
          else
            echo "✅ Security audit passed!"
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.sha }}
          path: |
            security-audit.json
            dependency-analysis.json
            license-report.json
          retention-days: 30

  performance-regression:
    name: Performance Regression Detection
    runs-on: ubuntu-latest
    needs: [bundle-analysis, lighthouse-audit]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download bundle analysis
        uses: actions/download-artifact@v4
        with:
          name: bundle-analysis-${{ github.sha }}
          path: ./analysis

      - name: Download Lighthouse reports
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-reports-${{ github.sha }}
          path: ./lighthouse

      - name: Check for performance regressions
        run: |
          # This would run a custom script to compare metrics
          npm run check-performance-regression
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}

  deploy-monitoring:
    name: Deploy Performance Monitoring Dashboard
    runs-on: ubuntu-latest
    needs: [bundle-analysis, lighthouse-audit]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./monitoring-data

      - name: Generate monitoring dashboard data
        run: |
          npm run generate-monitoring-dashboard
        env:
          NODE_ENV: production

      - name: Deploy to monitoring service
        run: |
          # This would deploy the monitoring data to your chosen service
          # Examples: AWS S3, Vercel Analytics, Custom API, etc.
          echo "Deploying monitoring dashboard..."
        env:
          MONITORING_API_KEY: ${{ secrets.MONITORING_API_KEY }}
          MONITORING_ENDPOINT: ${{ secrets.MONITORING_ENDPOINT }}

  notify-teams:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [bundle-analysis, lighthouse-audit, dependency-audit]
    if: always() && (github.ref == 'refs/heads/main' || failure())
    
    steps:
      - name: Prepare notification
        run: |
          if [ "${{ needs.bundle-analysis.result }}" = "failure" ] || \
             [ "${{ needs.lighthouse-audit.result }}" = "failure" ] || \
             [ "${{ needs.dependency-audit.result }}" = "failure" ]; then
            echo "STATUS=failed" >> $GITHUB_ENV
            echo "COLOR=danger" >> $GITHUB_ENV
            echo "EMOJI=🚨" >> $GITHUB_ENV
          else
            echo "STATUS=passed" >> $GITHUB_ENV
            echo "COLOR=good" >> $GITHUB_ENV
            echo "EMOJI=✅" >> $GITHUB_ENV
          fi

      - name: Notify Slack
        if: env.STATUS == 'failed' || github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "channel": "#performance-monitoring",
              "username": "Performance Bot",
              "icon_emoji": "${{ env.EMOJI }}",
              "attachments": [{
                "color": "${{ env.COLOR }}",
                "title": "Performance Monitoring Report",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Status",
                    "value": "${{ env.STATUS }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                    "short": true
                  }
                ],
                "actions": [{
                  "type": "button",
                  "text": "View Details",
                  "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify via email (on failure)
        if: env.STATUS == 'failed'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "🚨 Performance Monitoring Alert - ${{ github.repository }}"
          to: ${{ secrets.ALERT_EMAIL }}
          from: "Performance Bot <${{ secrets.SMTP_USERNAME }}>"
          html_body: |
            <h2>Performance Monitoring Alert</h2>
            <p>The performance monitoring workflow has detected issues in <strong>${{ github.repository }}</strong>.</p>
            
            <h3>Details:</h3>
            <ul>
              <li><strong>Branch:</strong> ${{ github.ref_name }}</li>
              <li><strong>Commit:</strong> <a href="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}">${{ github.sha }}</a></li>
              <li><strong>Workflow:</strong> <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Details</a></li>
            </ul>
            
            <h3>Failed Jobs:</h3>
            <ul>
              ${{ needs.bundle-analysis.result == 'failure' && '<li>Bundle Analysis</li>' || '' }}
              ${{ needs.lighthouse-audit.result == 'failure' && '<li>Lighthouse Audit</li>' || '' }}
              ${{ needs.dependency-audit.result == 'failure' && '<li>Security Audit</li>' || '' }}
            </ul>
            
            <p>Please review the workflow logs and take appropriate action.</p>