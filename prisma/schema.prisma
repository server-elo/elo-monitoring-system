// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?   // For email/password authentication
  image         String?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts                Account[]
  sessions                Session[]
  profile                 UserProfile?
  progress                UserProgress[]
  achievements            UserAchievement[]
  submissions             CodeSubmission[]
  collaborations          Collaboration[]
  mentorships             Mentorship[]              @relation("MentorRelation")
  menteeships             Mentorship[]              @relation("MenteeRelation")
  chatMessages            ChatMessage[]
  feedback                Feedback[]
  uatSessions             UATSession[]
  enrollments             CourseEnrollment[]

  // Enhanced AI Features Relations
  aiLearningContext       AILearningContext?
  conceptMasteries        ConceptMastery[]
  personalizedChallenges  PersonalizedChallenge[]
  personalizedSubmissions PersonalizedSubmission[]
  securityAnalyses        SecurityAnalysis[]
  aiInteractions          AIInteraction[]
  voiceLearningSession    VoiceLearningSession[]
  jobApplications         JobApplication[]
  blockchainCertificates  BlockchainCertificate[]
  mentorMatches           MentorshipMatch[]         @relation("MentorMatches")
  menteeMatches           MentorshipMatch[]         @relation("MenteeMatches")
  
  // Project-based Learning Relations
  projectSubmissions      ProjectSubmission[]
  reviewedProjects        ProjectSubmission[]       @relation("ProjectReviewer")
  projectReviews          ProjectReview[]
  projectCollaborations   ProjectCollaboration[]    @relation("ProjectCollaborationCreator")
  projectCollaborator     ProjectCollaborator[]
  projectChatMessages     ProjectChatMessage[]

  @@index([role])
  @@index([createdAt])
  @@index([email, role])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProfile {
  id              String     @id @default(cuid())
  userId          String     @unique
  bio             String?
  githubUsername  String?
  twitterUsername String?
  linkedinUrl     String?
  websiteUrl      String?
  skillLevel      SkillLevel @default(BEGINNER)
  totalXP         Int        @default(0)
  currentLevel    Int        @default(1)
  streak          Int        @default(0)
  lastActiveDate  DateTime   @default(now())
  preferences     Json?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id             String     @id @default(cuid())
  title          String
  description    String
  difficulty     SkillLevel
  estimatedHours Int
  isPublished    Boolean    @default(false)
  order          Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  modules     Module[]
  progress    UserProgress[]
  enrollments CourseEnrollment[]
}

model CourseEnrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  completedAt DateTime?
  progress   Float    @default(0.0) // 0.0 to 1.0
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Module {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String
  content     Json
  order       Int
  xpReward    Int      @default(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course   Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
  progress UserProgress[]
  projects Project[]

  @@unique([courseId, title])
}

model Lesson {
  id          String     @id @default(cuid())
  moduleId    String
  title       String
  description String
  content     Json
  type        LessonType
  order       Int
  xpReward    Int        @default(50)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  module      Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  submissions CodeSubmission[]
  progress    UserProgress[]

  @@unique([moduleId, title])
}

model UserProgress {
  id          String         @id @default(cuid())
  userId      String
  courseId    String?
  moduleId    String?
  lessonId    String?
  status      ProgressStatus @default(NOT_STARTED)
  score       Int?
  timeSpent   Int            @default(0) // in minutes
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module Module? @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lesson Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, moduleId, lessonId])
  @@index([userId, status])
  @@index([userId, completedAt])
  @@index([courseId, status])
}

model Achievement {
  id          String              @id @default(cuid())
  title       String
  description String
  icon        String
  category    AchievementCategory
  requirement Json
  xpReward    Int                 @default(0)
  badgeUrl    String?
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())

  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  progress      Int      @default(0)
  isCompleted   Boolean  @default(false)

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId, isCompleted])
  @@index([userId, unlockedAt])
}

model CodeSubmission {
  id           String           @id @default(cuid())
  userId       String
  lessonId     String
  code         String
  language     String           @default("solidity")
  status       SubmissionStatus @default(PENDING)
  score        Int?
  feedback     String?
  gasUsed      String?
  deploymentTx String?
  testResults  Json?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Collaboration {
  id              String              @id @default(cuid())
  title           String
  description     String?
  type            CollaborationType
  status          CollaborationStatus @default(ACTIVE)
  maxParticipants Int                 @default(2)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  participants User[]
  chatMessages ChatMessage[]

  @@index([status, type])
  @@index([createdAt])
}

model Mentorship {
  id        String           @id @default(cuid())
  mentorId  String
  menteeId  String
  status    MentorshipStatus @default(PENDING)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  mentor User @relation("MentorRelation", fields: [mentorId], references: [id], onDelete: Cascade)
  mentee User @relation("MenteeRelation", fields: [menteeId], references: [id], onDelete: Cascade)

  @@unique([mentorId, menteeId])
}

model ChatMessage {
  id              String      @id @default(cuid())
  content         String
  userId          String
  collaborationId String?
  type            MessageType @default(TEXT)
  metadata        Json?
  createdAt       DateTime    @default(now())

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  collaboration Collaboration? @relation(fields: [collaborationId], references: [id], onDelete: Cascade)

  @@index([collaborationId, createdAt])
  @@index([userId, createdAt])
}

model Feedback {
  id               String   @id @default(cuid())
  type             String // 'rating', 'survey', 'bug_report', 'feature_request', 'usability'
  category         String
  title            String
  description      String
  rating           Int?
  severity         String? // 'low', 'medium', 'high', 'critical'
  priority         String // 'low', 'medium', 'high', 'critical'
  steps            String // Array of reproduction steps
  expectedBehavior String?
  actualBehavior   String?
  browserInfo      String?
  screenRecording  Boolean  @default(false)
  contactEmail     String?
  allowFollowUp    Boolean  @default(false)
  page             String
  sessionId        String
  uatSessionId     String?   // For UAT feedback
  userId           String?
  timestamp        DateTime @default(now())
  ipAddress        String?
  userAgent        String?
  assignedTeam     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  uatSession UATSession? @relation(fields: [uatSessionId], references: [id], onDelete: SetNull)
}

model UATSession {
  id                String    @id @default(cuid())
  testerId          String
  testerExperience  String? // 'beginner', 'intermediate', 'expert'
  testerBackground  String?
  deviceInfo        String?
  browserInfo       String?
  assignedTasks     String // Array of task IDs
  startTime         DateTime  @default(now())
  endTime           DateTime?
  status            String    @default("not_started") // 'not_started', 'in_progress', 'completed', 'abandoned'
  errorsEncountered Int       @default(0)
  helpRequests      Int       @default(0)
  feedbackCount     Int       @default(0)
  lastFeedbackAt    DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  tester      User            @relation(fields: [testerId], references: [id], onDelete: Cascade)
  feedback    Feedback[]
  taskResults UATTaskResult[]
}

model UATTaskResult {
  id         String   @id @default(cuid())
  sessionId  String
  taskId     String
  completed  Boolean  @default(false)
  timeSpent  Int? // in seconds
  errorCount Int      @default(0)
  helpUsed   Boolean  @default(false)
  rating     Int? // 1-5 rating
  comments   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  session UATSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, taskId])
}

// Enums
enum UserRole {
  STUDENT
  MENTOR
  INSTRUCTOR
  ADMIN
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum LessonType {
  THEORY
  CODING
  QUIZ
  PROJECT
  INTERACTIVE
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum AchievementCategory {
  LEARNING
  CODING
  SOCIAL
  STREAK
  SPECIAL
}

enum SubmissionStatus {
  PENDING
  COMPILING
  COMPILED
  TESTING
  PASSED
  FAILED
  ERROR
}

enum CollaborationType {
  PAIR_PROGRAMMING
  CODE_REVIEW
  PROJECT
  STUDY_GROUP
}

enum CollaborationStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MentorshipStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MessageType {
  TEXT
  CODE
  SYSTEM
  FILE
}

enum ProjectCategory {
  DEFI
  NFT
  DAO
  GAMING
  UTILITY
  SECURITY
  INFRASTRUCTURE
  EDUCATIONAL
}

enum ProjectSubmissionStatus {
  IN_PROGRESS
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  NEEDS_REVISION
}

enum ProjectCollaborationStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProjectRole {
  OWNER
  CONTRIBUTOR
  REVIEWER
  VIEWER
}

// Enhanced AI Features Models

// AI Learning Analytics and Context
model AILearningContext {
  id                    String   @id @default(cuid())
  userId                String   @unique
  currentLevel          Int      @default(1)
  skillLevel            SkillLevel @default(BEGINNER)
  learningPath          String // Array of topic names
  recentTopics          String // Recently studied topics
  weakAreas             String // Areas needing improvement
  strongAreas           String // Areas of strength
  preferredLearningStyle String  @default("mixed") // visual, textual, interactive, mixed
  conceptMastery        Json     // concept -> mastery level (0-1)
  timeSpentPerTopic     Json     // topic -> minutes
  errorPatterns         String // Common error patterns
  successPatterns       String // Successful learning patterns
  recommendedNextTopics String // AI-recommended next topics
  difficultyPreference  Float    @default(0.5) // 0-1, where 1 is challenging
  lastAnalysisUpdate    DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Concept Mastery Tracking
model ConceptMastery {
  id           String   @id @default(cuid())
  userId       String
  concept      String
  masteryLevel Float    @default(0) // 0-100 mastery level
  masteredAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, concept])
}

// Personalized Coding Challenges
model PersonalizedChallenge {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String
  difficulty        Int      // 1-10 scale
  topic             String
  starterCode       String
  solutionCode      String?
  testCases         Json     // Array of test case objects
  hints             String // Progressive hints
  learningObjectives String // What student should learn
  aiGenerated       Boolean  @default(true)
  isCompleted       Boolean  @default(false)
  completedAt       DateTime?
  timeSpent         Int      @default(0) // minutes
  attempts          Int      @default(0)
  bestScore         Int?     // 0-100
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user        User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions PersonalizedSubmission[]
}

// Submissions for personalized challenges
model PersonalizedSubmission {
  id          String   @id @default(cuid())
  challengeId String
  userId      String
  code        String
  score       Int?     // 0-100
  feedback    String?
  aiAnalysis  Json?    // AI-generated analysis
  isCorrect   Boolean  @default(false)
  timeSpent   Int      @default(0) // minutes
  createdAt   DateTime @default(now())

  challenge PersonalizedChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Security Analysis Results
model SecurityAnalysis {
  id                String   @id @default(cuid())
  userId            String
  codeHash          String   // Hash of analyzed code for caching
  code              String
  vulnerabilities   Json     // Array of vulnerability objects
  gasOptimizations  Json     // Array of optimization suggestions
  bestPractices     Json     // Array of best practice recommendations
  overallScore      Int      // 0-100 security score
  aiModel           String   // Which AI model performed analysis
  analysisTime      Int      // Time taken in milliseconds
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, codeHash])
}

// AI Interaction Logs
model AIInteraction {
  id           String   @id @default(cuid())
  userId       String
  sessionId    String   // Group related interactions
  requestType  String   // code, explanation, analysis, quick
  prompt       String
  response     String
  aiModel      String   // CodeLlama-34B, Gemini-Pro, etc.
  responseTime Int      // milliseconds
  confidence   Float    // AI confidence score
  wasHelpful   Boolean? // User feedback
  fallbackUsed Boolean  @default(false)
  contextUsed  Json?    // User context at time of request
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, sessionId])
  @@index([requestType, aiModel])
}

// Voice Learning Sessions
model VoiceLearningSession {
  id              String   @id @default(cuid())
  userId          String
  audioData       String?  // Base64 encoded audio or file path
  transcription   String?  // Speech-to-text result
  command         String?  // Extracted command
  response        String?  // AI response
  accuracy        Float?   // Transcription accuracy
  sessionDuration Int      @default(0) // seconds
  isSuccessful    Boolean  @default(false)
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Multi-Modal Learning Content
model MultiModalContent {
  id                String   @id @default(cuid())
  concept           String
  skillLevel        SkillLevel
  textExplanation   String
  visualDiagram     String?  // URL or base64 image
  interactiveDemo   String?  // URL or embedded content
  codeExample       String?
  audioNarration    String?  // URL to audio file
  videoExplanation  String?  // URL to video
  aiGenerated       Boolean  @default(true)
  generationModel   String?  // Which AI model generated content
  usageCount        Int      @default(0)
  averageRating     Float?   // User ratings
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([concept, skillLevel])
}

// Job Board Integration
model JobPosting {
  id              String   @id @default(cuid())
  title           String
  company         String
  description     String
  requirements    String // Required skills
  soliditySkills  String // Specific Solidity skills needed
  experienceLevel SkillLevel
  salaryMin       Int?
  salaryMax       Int?
  location        String?
  isRemote        Boolean  @default(false)
  applicationUrl  String?
  contactEmail    String?
  isActive        Boolean  @default(true)
  postedBy        String?  // Company representative
  aiMatched       Boolean  @default(false) // AI-matched to users
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  applications JobApplication[]

  @@index([isActive, experienceLevel])
  @@index([soliditySkills])
}

// Job Applications
model JobApplication {
  id          String   @id @default(cuid())
  userId      String
  jobId       String
  status      String   @default("applied") // applied, reviewed, interview, rejected, accepted
  coverLetter String?
  portfolio   Json?    // Links to projects, GitHub, etc.
  aiScore     Float?   // AI-calculated match score
  appliedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  JobPosting @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
}

// Blockchain Certificates (NFT-based)
model BlockchainCertificate {
  id              String   @id @default(cuid())
  userId          String
  certificateType String   // beginner, intermediate, advanced, specialized
  skillsVerified  String // Verified Solidity skills
  nftTokenId      String?  // On-chain certificate token ID
  nftContractAddress String? // Smart contract address
  blockchainNetwork String @default("polygon") // ethereum, polygon, etc.
  transactionHash String?  // Minting transaction
  ipfsHash        String?  // Metadata stored on IPFS
  issuedBy        String   @default("SolidityLearn") // Issuing authority
  validUntil      DateTime? // Expiration date
  isRevoked       Boolean  @default(false)
  verificationUrl String?  // Public verification URL
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, certificateType])
  @@index([nftTokenId])
}

// Project-based Learning
model Project {
  id              String   @id @default(cuid())
  title           String
  description     String
  difficulty      SkillLevel
  category        ProjectCategory
  tags            String   // Comma-separated tags
  requirements    String   // Project requirements as JSON
  starterCode     String   // Initial code template
  solutionCode    String?  // Reference solution (hidden from students)
  testCases       Json     // Test cases for validation
  estimatedHours  Int      @default(4)
  xpReward        Int      @default(500)
  moduleId        String?  // Associated module if part of curriculum
  isPublished     Boolean  @default(false)
  isTemplate      Boolean  @default(false) // Can be used as template for new projects
  githubUrl       String?  // Link to GitHub repository
  deploymentUrl   String?  // Link to deployed project
  resources       Json?    // Additional resources and links
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  module          Module?           @relation(fields: [moduleId], references: [id], onDelete: SetNull)
  submissions     ProjectSubmission[]
  collaborations  ProjectCollaboration[]
  reviews         ProjectReview[]

  @@index([difficulty, category])
  @@index([isPublished, category])
}

// Enhanced Mentorship Matching
model MentorshipMatch {
  id              String   @id @default(cuid())
  mentorId        String
  menteeId        String
  matchScore      Float    // AI-calculated compatibility (0-1)
  skillsToLearn   String // What mentee wants to learn
  skillsToTeach   String // What mentor can teach
  preferredStyle  String?  // Learning/teaching style preference
  timeZone        String?
  availability    Json?    // Available time slots
  status          String   @default("pending") // pending, active, completed, cancelled
  aiRecommended   Boolean  @default(true)
  startDate       DateTime?
  endDate         DateTime?
  sessionsHeld    Int      @default(0)
  rating          Float?   // Mutual rating
  feedback        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  mentor User @relation("MentorMatches", fields: [mentorId], references: [id], onDelete: Cascade)
  mentee User @relation("MenteeMatches", fields: [menteeId], references: [id], onDelete: Cascade)

  @@unique([mentorId, menteeId])
  @@index([matchScore])
}

// Project Submissions
model ProjectSubmission {
  id            String   @id @default(cuid())
  projectId     String
  userId        String
  title         String
  description   String
  code          String   // Complete project code
  githubUrl     String?  // Link to GitHub repository
  deploymentUrl String?  // Link to deployed project
  demoVideoUrl  String?  // Link to demo video
  status        ProjectSubmissionStatus @default(IN_PROGRESS)
  feedback      String?  // Instructor feedback
  score         Int?     // 0-100 score
  gasUsed       String?  // Gas usage metrics
  testsPassed   Int      @default(0)
  testsTotal    Int      @default(0)
  submittedAt   DateTime?
  reviewedAt    DateTime?
  reviewedBy    String?  // Instructor ID
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  project  Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user     User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer User?                 @relation("ProjectReviewer", fields: [reviewedBy], references: [id], onDelete: SetNull)
  reviews  ProjectReview[]
  collaborators ProjectCollaborator[]

  @@unique([projectId, userId])
  @@index([status, createdAt])
}

// Project Collaboration
model ProjectCollaboration {
  id              String   @id @default(cuid())
  projectId       String
  title           String
  description     String?
  maxParticipants Int      @default(4)
  isPublic        Boolean  @default(true)
  status          ProjectCollaborationStatus @default(OPEN)
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  project       Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator       User                   @relation("ProjectCollaborationCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  collaborators ProjectCollaborator[]
  chatMessages  ProjectChatMessage[]

  @@index([status, isPublic])
}

// Project Collaborators
model ProjectCollaborator {
  id                String   @id @default(cuid())
  collaborationId   String?
  submissionId      String?
  userId            String
  role              ProjectRole @default(CONTRIBUTOR)
  contribution      String?  // Description of contribution
  joinedAt          DateTime @default(now())

  collaboration ProjectCollaboration? @relation(fields: [collaborationId], references: [id], onDelete: Cascade)
  submission    ProjectSubmission?    @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([collaborationId, userId])
  @@unique([submissionId, userId])
}

// Project Reviews (Peer Review)
model ProjectReview {
  id             String   @id @default(cuid())
  projectId      String
  submissionId   String
  reviewerId     String
  rating         Int      // 1-5 stars
  codeQuality    Int?     // 1-5 rating
  functionality  Int?     // 1-5 rating
  creativity     Int?     // 1-5 rating
  documentation  Int?     // 1-5 rating
  feedback       String
  helpful        Int      @default(0) // Upvotes from other users
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  project    Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  submission ProjectSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  reviewer   User              @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@unique([submissionId, reviewerId])
  @@index([projectId, rating])
}

// Project Chat Messages
model ProjectChatMessage {
  id              String   @id @default(cuid())
  collaborationId String
  userId          String
  content         String
  type            MessageType @default(TEXT)
  metadata        Json?
  createdAt       DateTime @default(now())

  collaboration ProjectCollaboration @relation(fields: [collaborationId], references: [id], onDelete: Cascade)
  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([collaborationId, createdAt])
}
