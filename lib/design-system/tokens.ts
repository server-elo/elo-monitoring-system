/** * Design System Tokens *  * Centralized design tokens for consistent visual language across the platform. * These tokens define colors, typography, spacing, animations, and layout rules. */ export const designTokens = {
  // Color System - Semantic tokens const colors = { primary: { 50: 'hsl(217,
  91%,
  96%)',
  100: 'hsl(217,
  91%,
  91%)',
  200: 'hsl(217,
  91%,
  82%)',
  300: 'hsl(217,
  91%,
  70%)',
  400: 'hsl(217,
  91%,
  60%)',
  500: 'hsl(217,
  91%,
  50%)',
  600: 'hsl(217,
  91%,
  45%)',
  700: 'hsl(217,
  91%,
  35%)',
  800: 'hsl(217,
  91%,
  25%)',
  900: 'hsl(217,
  91%,
  20%)',
  DEFAULT: 'hsl(217,
  91%,
  60%)'
}, semantic: { success: { light: '#10B981', DEFAULT: '#059669', dark: '#047857' }, warning: { light: '#F59E0B', DEFAULT: '#D97706', dark: '#B45309' }, error: { light: '#EF4444', DEFAULT: '#DC2626', dark: '#B91C1C' }, info: { light: '#3B82F6', DEFAULT: '#2563EB', dark: '#1D4ED8' }
}, // Refined glassmorphism palette glass: { background: 'rgba(0, 0, 0, 0.5)', backgroundLight: 'rgba(255, 255, 255, 0.05)', backgroundDark: 'rgba(0, 0, 0, 0.8)', border: 'rgba(255, 255, 255, 0.1)', borderHover: 'rgba(255, 255, 255, 0.2)', blur: '16px', blurHeavy: '24px', saturation: '180%' }, // Gradient presets gradients: { primary: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', secondary: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)', success: 'linear-gradient(135deg, #4ade80 0%, #22c55e 100%)', brand: 'linear-gradient(to right, #3b82f6, #8b5cf6, #ec4899)', dark: 'linear-gradient(to bottom, #0f0f0f, #1a1a1a)' }
}, // Typography System - Fluid responsive scale const typography = {
  scale: { xs: 'clamp(0.75rem,
  0.7rem + 0.25vw,
  0.875rem)',
  sm: 'clamp(0.875rem,
  0.8rem + 0.375vw,
  1rem)',
  base: 'clamp(1rem,
  0.9rem + 0.5vw,
  1.125rem)',
  lg: 'clamp(1.125rem,
  1rem + 0.625vw,
  1.25rem)',
  xl: 'clamp(1.25rem,
  1.1rem + 0.75vw,
  1.5rem)',
  ',
  2xl': 'clamp(1.5rem,
  1.3rem + 1vw,
  1.875rem)',
  ',
  3xl': 'clamp(1.875rem,
  1.5rem + 1.875vw,
  2.25rem)',
  ',
  4xl': 'clamp(2.25rem,
  1.8rem + 2.25vw,
  3rem)',
  ',
  5xl': 'clamp(3rem,
  2.4rem + 3vw,
  3.75rem)',
  ',
  6xl': 'clamp(3.75rem,
  3rem + 3.75vw,
  4.5rem)'
}, fontFamily: { sans: ['Inter Variable', 'Inter', 'system-ui', '-apple-system', 'sans-serif'], mono: ['JetBrains Mono Variable', 'JetBrains Mono', 'Consolas', 'monospace'], display: ['Outfit Variable', 'Outfit', 'system-ui', 'sans-serif'] }, fontWeight: { thin: '100', light: '300',  normal: '400', medium: '500', semibold: '600', bold: '700', extrabold: '800', black: '900' }, lineHeight: {  none: '1', tight: '1.25', snug: '1.375',  normal: '1.5', relaxed: '1.625', loose: '2' }, letterSpacing: { tighter: '-0.05em', tight: '-0.025em',  normal: '0', wide: '0.025em', wider: '0.05em', widest: '0.1em' }
}, // Spacing System - 8px grid const spacing = {
  scale: { 0: '0',
  0.5: '0.125rem',
  // 2px 1: '0.25rem',
  // 4px 1.5: '0.375rem',
  // 6px 2: '0.5rem',
  // 8px 2.5: '0.625rem',
  // 10px 3: '0.75rem',
  // 12px 3.5: '0.875rem',
  // 14px 4: '1rem',
  // 16px 5: '1.25rem',
  // 20px 6: '1.5rem',
  // 24px 7: '1.75rem',
  // 28px 8: '2rem',
  // 32px 9: '2.25rem',
  // 36px 10: '2.5rem',
  // 40px 11: '2.75rem',
  // 44px 12: '3rem',
  // 48px 14: '3.5rem',
  // 56px 16: '4rem',
  // 64px 20: '5rem',
  // 80px 24: '6rem',
  // 96px 28: '7rem',
  // 112px 32: '8rem',
  // 128px 36: '9rem',
  // 144px 40: '10rem',
  // 160px 44: '11rem',
  // 176px 48: '12rem',
  // 192px 52: '13rem',
  // 208px 56: '14rem',
  // 224px 60: '15rem',
  // 240px 64: '16rem',
  // 256px 72: '18rem',
  // 288px 80: '20rem',
  // 320px 96: '24rem',
  // 384px
}
}, // Animation System const motion = {
  duration: { instant: '50ms',
  fast: '150ms',
  normal: '300ms',
  slow: '500ms',
  slower: '700ms',
  slowest: '1000ms'
}, easing: { linear: 'linear', easeOut: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)', easeIn: 'cubic-bezier(0.55, 0.055, 0.675, 0.19)', easeInOut: 'cubic-bezier(0.645, 0.045, 0.355, 1)', spring: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)', bounce: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)' }, // Framer Motion presets spring: { tight: { type: 'spring', stiffness: 400, damping: 30 },  normal: { type: 'spring', stiffness: 300, damping: 25 }, loose: { type: 'spring', stiffness: 200, damping: 20 }, bouncy: { type: 'spring', stiffness: 600, damping: 15 } }
}, // Layout System const layout = {
  containerWidth: { xs: '100%',
  sm: '640px',
  md: '768px',
  lg: '1024px',
  xl: '1280px',
  ',
  2xl': '1536px',
  ',
  3xl': '1920px'
}, gridColumns: 12, breakpoints: { xs: '375px', sm: '640px', md: '768px', lg: '1024px', xl: '1280px', ',
2xl': '1536px' }, zIndex: { below: -1, base: 0, dropdown: 10, sticky: 20, overlay: 30, modal: 40, popover: 50, tooltip: 60,  notification: 70, commandPalette: 80 }
}, // Border System const borders = {
  radius: {  none: '0',
  sm: '0.125rem',
  // 2px,
  DEFAULT: '0.25rem',
  // 4px,
  md: '0.375rem',
  // 6px,
  lg: '0.5rem',
  // 8px,
  xl: '0.75rem',
  // 12px ',
  2xl': '1rem',
  // 16px ',
  3xl': '1.5rem',
  // 24px full: '9999px'
}, width: { 0: '0', DEFAULT: '1px', 2: '2px', 4: '4px', 8: '8px' }
}, // Shadow System const shadows = {
  xs: '0 1px 3px rgba(0,
  0,
  0,
  0.12),
  0 1px 2px rgba(0,
  0,
  0,
  0.24)',
  sm: '0 3px 6px rgba(0,
  0,
  0,
  0.16),
  0 3px 6px rgba(0,
  0,
  0,
  0.23)',
  DEFAULT: '0 10px 15px -3px rgba(0,
  0,
  0,
  0.1),
  0 4px 6px -2px rgba(0,
  0,
  0,
  0.05)',
  md: '0 10px 20px rgba(0,
  0,
  0,
  0.19),
  0 6px 6px rgba(0,
  0,
  0,
  0.23)',
  lg: '0 14px 28px rgba(0,
  0,
  0,
  0.25),
  0 10px 10px rgba(0,
  0,
  0,
  0.22)',
  xl: '0 19px 38px rgba(0,
  0,
  0,
  0.30),
  0 15px 12px rgba(0,
  0,
  0,
  0.22)',
  ',
  2xl': '0 25px 50px -12px rgba(0,
  0,
  0,
  0.25)',
  inner: 'inset 0 2px 4px 0 rgba(0,
  0,
  0,
  0.06)',
  none: 'none',
  // Special effects glow: { sm: '0 0 10px rgba(59,
  130,
  246,
  0.5)',
  DEFAULT: '0 0 20px rgba(59,
  130,
  246,
  0.5)',
  lg: '0 0 30px rgba(59,
  130,
  246,
  0.5)'
},  neon: { blue: '0 0 10px #3b82f6, 0 0 20px #3b82f6, 0 0 30px #3b82f6', purple: '0 0 10px #8b5cf6, 0 0 20px #8b5cf6, 0 0 30px #8b5cf6', pink: '0 0 10px #ec4899, 0 0 20px #ec4899, 0 0 30px #ec4899' }
}, // Effects const effects = {
  blur: {  none: '0',
  sm: '4px',
  DEFAULT: '8px',
  md: '12px',
  lg: '16px',
  xl: '24px',
  ',
  2xl': '40px',
  ',
  3xl': '64px'
}, opacity: { 0: '0', 5: '0.05', 10: '0.1', 20: '0.2', 25: '0.25', 30: '0.3', 40: '0.4', 50: '0.5', 60: '0.6', 70: '0.7', 75: '0.75', 80: '0.8', 90: '0.9', 95: '0.95', 100: '1' }
}
} as const; // Type exports
export type ColorToken = keyof typeof designTokens.colors;
export type SpacingToken = keyof typeof designTokens.spacing.scale;
export type TypographyToken = keyof typeof designTokens.typography.scale;
export type MotionToken = keyof typeof designTokens.motion.duration;
export type BreakpointToken = keyof typeof designTokens.layout.breakpoints; // Helper function to generate CSS variables from 'tokens'
export function generateCSSVariables(): string { let css = ':root {\n'; // Colors Object.entries(designTokens.colors).forEach(([category, values]) => { if (typeof, values: === 'object' && !Array.isArray(values)) { Object.entries(values).forEach(([key, value]) => { if (typeof, value: === 'string') { css += ` --color-${category}-${key}: ${value};\n`; } else if (typeof value === 'object') { Object.entries(value).forEach(([subKey, subValue]) => { css += ` --color-${category}-${key}-${subKey}: ${subValue};\n`; }); }
}); }
}); // Typography Object.entries(designTokens.typography.scale).forEach(([key, value]) => { css += ` --font-size-${key}: ${value};\n`; }); // Spacing Object.entries(designTokens.spacing.scale).forEach(([key, value]) => { css += ` --spacing-${key}: ${value};\n`; }); // Motion
Object.entries(designTokens.motion.duration).forEach(([key, value]) => { css += ` --duration-${key}: ${value};\n`; }); // Shadows Object.entries(designTokens.shadows).forEach(([key, value]) => { if (typeof, value: === 'string') { css += ` --shadow-${key}: ${value};\n`; }
}); css += '}\n'; return css;
} // Export a function to use tokens in JavaScript/TypeScript
export function token<T extends keyof typeof designTokens>( category: T, path: string
): unknown { const keys = path.split('.'); let value = any = designTokens[category]; for (const key of keys) { value = value?.[key]; }
return value;
}
